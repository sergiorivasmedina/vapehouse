{"ast":null,"code":"var DESCRIPTORS = require('../internals/descriptors');\n\nvar MATCH = require('../internals/well-known-symbol')('match');\n\nvar global = require('../internals/global');\n\nvar isForced = require('../internals/is-forced');\n\nvar inheritIfRequired = require('../internals/inherit-if-required');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar getFlags = require('../internals/regexp-flags');\n\nvar redefine = require('../internals/redefine');\n\nvar fails = require('../internals/fails');\n\nvar NativeRegExp = global.RegExp;\nvar RegExpPrototype = NativeRegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g; // \"new\" should create a new object, old webkit bug\n\nvar CORRECT_NEW = new NativeRegExp(re1) !== re1;\nvar FORCED = isForced('RegExp', DESCRIPTORS && (!CORRECT_NEW || fails(function () {\n  re2[MATCH] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match\n\n  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';\n}))); // `RegExp` constructor\n// https://tc39.github.io/ecma262/#sec-regexp-constructor\n\nif (FORCED) {\n  var RegExpWrapper = function RegExp(pattern, flags) {\n    var thisIsRegExp = this instanceof RegExpWrapper;\n    var patternIsRegExp = isRegExp(pattern);\n    var flagsAreUndefined = flags === undefined;\n    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern : inheritIfRequired(CORRECT_NEW ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags) : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper) ? pattern.source : pattern, patternIsRegExp && flagsAreUndefined ? getFlags.call(pattern) : flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);\n  };\n\n  var proxy = function proxy(key) {\n    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {\n      configurable: true,\n      get: function get() {\n        return NativeRegExp[key];\n      },\n      set: function set(it) {\n        NativeRegExp[key] = it;\n      }\n    });\n  };\n\n  var keys = getOwnPropertyNames(NativeRegExp);\n  var i = 0;\n\n  while (i < keys.length) {\n    proxy(keys[i++]);\n  }\n\n  RegExpPrototype.constructor = RegExpWrapper;\n  RegExpWrapper.prototype = RegExpPrototype;\n  redefine(global, 'RegExp', RegExpWrapper);\n} // https://tc39.github.io/ecma262/#sec-get-regexp-@@species\n\n\nrequire('../internals/set-species')('RegExp');","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.regexp.constructor.js"],"names":["DESCRIPTORS","require","MATCH","global","isForced","inheritIfRequired","defineProperty","f","getOwnPropertyNames","isRegExp","getFlags","redefine","fails","NativeRegExp","RegExp","RegExpPrototype","prototype","re1","re2","CORRECT_NEW","FORCED","RegExpWrapper","pattern","flags","thisIsRegExp","patternIsRegExp","flagsAreUndefined","undefined","constructor","source","call","proxy","key","configurable","get","set","it","keys","i","length"],"mappings":"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","sourcesContent":["var DESCRIPTORS = require('../internals/descriptors');\nvar MATCH = require('../internals/well-known-symbol')('match');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar defineProperty = require('../internals/object-define-property').f;\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar isRegExp = require('../internals/is-regexp');\nvar getFlags = require('../internals/regexp-flags');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar NativeRegExp = global.RegExp;\nvar RegExpPrototype = NativeRegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n\n// \"new\" should create a new object, old webkit bug\nvar CORRECT_NEW = new NativeRegExp(re1) !== re1;\n\nvar FORCED = isForced('RegExp', DESCRIPTORS && (!CORRECT_NEW || fails(function () {\n  re2[MATCH] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';\n})));\n\n// `RegExp` constructor\n// https://tc39.github.io/ecma262/#sec-regexp-constructor\nif (FORCED) {\n  var RegExpWrapper = function RegExp(pattern, flags) {\n    var thisIsRegExp = this instanceof RegExpWrapper;\n    var patternIsRegExp = isRegExp(pattern);\n    var flagsAreUndefined = flags === undefined;\n    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern\n      : inheritIfRequired(CORRECT_NEW\n        ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)\n        : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)\n          ? pattern.source\n          : pattern, patternIsRegExp && flagsAreUndefined ? getFlags.call(pattern) : flags)\n      , thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);\n  };\n  var proxy = function (key) {\n    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {\n      configurable: true,\n      get: function () { return NativeRegExp[key]; },\n      set: function (it) { NativeRegExp[key] = it; }\n    });\n  };\n  var keys = getOwnPropertyNames(NativeRegExp);\n  var i = 0;\n  while (i < keys.length) proxy(keys[i++]);\n  RegExpPrototype.constructor = RegExpWrapper;\n  RegExpWrapper.prototype = RegExpPrototype;\n  redefine(global, 'RegExp', RegExpWrapper);\n}\n\n// https://tc39.github.io/ecma262/#sec-get-regexp-@@species\nrequire('../internals/set-species')('RegExp');\n"]},"metadata":{},"sourceType":"script"}