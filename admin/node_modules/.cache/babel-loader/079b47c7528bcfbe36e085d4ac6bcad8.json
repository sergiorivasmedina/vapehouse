{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, deprecated, tagPropType } from './utils';\nvar propTypes = {\n  light: PropTypes.bool,\n  dark: PropTypes.bool,\n  inverse: deprecated(PropTypes.bool, 'Please use the prop \"dark\"'),\n  full: PropTypes.bool,\n  fixed: PropTypes.string,\n  sticky: PropTypes.string,\n  color: PropTypes.string,\n  role: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  toggleable: deprecated(PropTypes.oneOfType([PropTypes.bool, PropTypes.string]), 'Please use the prop \"expand\"'),\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n};\nvar defaultProps = {\n  tag: 'nav',\n  expand: false\n};\n\nvar getExpandClass = function getExpandClass(expand) {\n  if (expand === false) {\n    return false;\n  } else if (expand === true || expand === 'xs') {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\" + expand;\n}; // To better maintain backwards compatibility while toggleable is deprecated.\n// We must map breakpoints to the next breakpoint so that toggleable and expand do the same things at the same breakpoint.\n\n\nvar toggleableToExpand = {\n  xs: 'sm',\n  sm: 'md',\n  md: 'lg',\n  lg: 'xl'\n};\n\nvar getToggleableClass = function getToggleableClass(toggleable) {\n  if (toggleable === undefined || toggleable === 'xl') {\n    return false;\n  } else if (toggleable === false) {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\" + (toggleable === true ? 'sm' : toggleableToExpand[toggleable] || toggleable);\n};\n\nvar Navbar = function Navbar(props) {\n  var _classNames;\n\n  var toggleable = props.toggleable,\n      expand = props.expand,\n      className = props.className,\n      cssModule = props.cssModule,\n      light = props.light,\n      dark = props.dark,\n      inverse = props.inverse,\n      fixed = props.fixed,\n      sticky = props.sticky,\n      color = props.color,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"toggleable\", \"expand\", \"className\", \"cssModule\", \"light\", \"dark\", \"inverse\", \"fixed\", \"sticky\", \"color\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'navbar', getExpandClass(expand) || getToggleableClass(toggleable), (_classNames = {\n    'navbar-light': light,\n    'navbar-dark': inverse || dark\n  }, _classNames[\"bg-\" + color] = color, _classNames[\"fixed-\" + fixed] = fixed, _classNames[\"sticky-\" + sticky] = sticky, _classNames)), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\nexport default Navbar;","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/@coreui/react/node_modules/reactstrap/es/Navbar.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","classNames","mapToCssModules","deprecated","tagPropType","propTypes","light","bool","dark","inverse","full","fixed","string","sticky","color","role","tag","className","cssModule","object","toggleable","oneOfType","expand","defaultProps","getExpandClass","toggleableToExpand","xs","sm","md","lg","getToggleableClass","undefined","Navbar","props","_classNames","Tag","attributes","classes","createElement"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, deprecated, tagPropType } from './utils';\nvar propTypes = {\n  light: PropTypes.bool,\n  dark: PropTypes.bool,\n  inverse: deprecated(PropTypes.bool, 'Please use the prop \"dark\"'),\n  full: PropTypes.bool,\n  fixed: PropTypes.string,\n  sticky: PropTypes.string,\n  color: PropTypes.string,\n  role: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  toggleable: deprecated(PropTypes.oneOfType([PropTypes.bool, PropTypes.string]), 'Please use the prop \"expand\"'),\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n};\nvar defaultProps = {\n  tag: 'nav',\n  expand: false\n};\n\nvar getExpandClass = function getExpandClass(expand) {\n  if (expand === false) {\n    return false;\n  } else if (expand === true || expand === 'xs') {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\" + expand;\n}; // To better maintain backwards compatibility while toggleable is deprecated.\n// We must map breakpoints to the next breakpoint so that toggleable and expand do the same things at the same breakpoint.\n\n\nvar toggleableToExpand = {\n  xs: 'sm',\n  sm: 'md',\n  md: 'lg',\n  lg: 'xl'\n};\n\nvar getToggleableClass = function getToggleableClass(toggleable) {\n  if (toggleable === undefined || toggleable === 'xl') {\n    return false;\n  } else if (toggleable === false) {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\" + (toggleable === true ? 'sm' : toggleableToExpand[toggleable] || toggleable);\n};\n\nvar Navbar = function Navbar(props) {\n  var _classNames;\n\n  var toggleable = props.toggleable,\n      expand = props.expand,\n      className = props.className,\n      cssModule = props.cssModule,\n      light = props.light,\n      dark = props.dark,\n      inverse = props.inverse,\n      fixed = props.fixed,\n      sticky = props.sticky,\n      color = props.color,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"toggleable\", \"expand\", \"className\", \"cssModule\", \"light\", \"dark\", \"inverse\", \"fixed\", \"sticky\", \"color\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'navbar', getExpandClass(expand) || getToggleableClass(toggleable), (_classNames = {\n    'navbar-light': light,\n    'navbar-dark': inverse || dark\n  }, _classNames[\"bg-\" + color] = color, _classNames[\"fixed-\" + fixed] = fixed, _classNames[\"sticky-\" + sticky] = sticky, _classNames)), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\nexport default Navbar;"]},"metadata":{},"sourceType":"module"}