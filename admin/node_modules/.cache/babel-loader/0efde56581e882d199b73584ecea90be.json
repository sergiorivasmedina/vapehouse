{"ast":null,"code":"var anObject = require('../internals/an-object');\n\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\n\nvar toLength = require('../internals/to-length');\n\nvar bind = require('../internals/bind-context');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar BREAK = {};\n\nvar exports = module.exports = function (iterable, fn, that, ENTRIES, ITERATOR) {\n  var boundFunction = bind(fn, that, ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, step;\n\n  if (ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators\n\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);\n        if (result === BREAK) return BREAK;\n      }\n\n      return;\n    }\n\n    iterator = iterFn.call(iterable);\n  }\n\n  while (!(step = iterator.next()).done) {\n    if (callWithSafeIterationClosing(iterator, boundFunction, step.value, ENTRIES) === BREAK) return BREAK;\n  }\n};\n\nexports.BREAK = BREAK;","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/internals/iterate.js"],"names":["anObject","require","isArrayIteratorMethod","toLength","bind","getIteratorMethod","callWithSafeIterationClosing","BREAK","exports","module","iterable","fn","that","ENTRIES","ITERATOR","boundFunction","iterator","iterFn","index","length","result","step","TypeError","call","next","done","value"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,uCAAD,CAAnC;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,2BAAD,CAAlB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,kCAAD,CAA/B;;AACA,IAAIK,4BAA4B,GAAGL,OAAO,CAAC,+CAAD,CAA1C;;AACA,IAAIM,KAAK,GAAG,EAAZ;;AAEA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB,UAAUE,QAAV,EAAoBC,EAApB,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiD;AAC9E,MAAIC,aAAa,GAAGX,IAAI,CAACO,EAAD,EAAKC,IAAL,EAAWC,OAAO,GAAG,CAAH,GAAO,CAAzB,CAAxB;AACA,MAAIG,QAAJ,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,IAA7C;;AAEA,MAAIP,QAAJ,EAAc;AACZE,IAAAA,QAAQ,GAAGN,QAAX;AACD,GAFD,MAEO;AACLO,IAAAA,MAAM,GAAGZ,iBAAiB,CAACK,QAAD,CAA1B;AACA,QAAI,OAAOO,MAAP,IAAiB,UAArB,EAAiC,MAAMK,SAAS,CAAC,wBAAD,CAAf,CAF5B,CAGL;;AACA,QAAIpB,qBAAqB,CAACe,MAAD,CAAzB,EAAmC;AACjC,WAAKC,KAAK,GAAG,CAAR,EAAWC,MAAM,GAAGhB,QAAQ,CAACO,QAAQ,CAACS,MAAV,CAAjC,EAAoDA,MAAM,GAAGD,KAA7D,EAAoEA,KAAK,EAAzE,EAA6E;AAC3EE,QAAAA,MAAM,GAAGP,OAAO,GAAGE,aAAa,CAACf,QAAQ,CAACqB,IAAI,GAAGX,QAAQ,CAACQ,KAAD,CAAhB,CAAR,CAAiC,CAAjC,CAAD,EAAsCG,IAAI,CAAC,CAAD,CAA1C,CAAhB,GAAiEN,aAAa,CAACL,QAAQ,CAACQ,KAAD,CAAT,CAA9F;AACA,YAAIE,MAAM,KAAKb,KAAf,EAAsB,OAAOA,KAAP;AACvB;;AAAC;AACH;;AACDS,IAAAA,QAAQ,GAAGC,MAAM,CAACM,IAAP,CAAYb,QAAZ,CAAX;AACD;;AAED,SAAO,CAAC,CAACW,IAAI,GAAGL,QAAQ,CAACQ,IAAT,EAAR,EAAyBC,IAAjC,EAAuC;AACrC,QAAInB,4BAA4B,CAACU,QAAD,EAAWD,aAAX,EAA0BM,IAAI,CAACK,KAA/B,EAAsCb,OAAtC,CAA5B,KAA+EN,KAAnF,EAA0F,OAAOA,KAAP;AAC3F;AACF,CAtBD;;AAwBAC,OAAO,CAACD,KAAR,GAAgBA,KAAhB","sourcesContent":["var anObject = require('../internals/an-object');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/bind-context');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar BREAK = {};\n\nvar exports = module.exports = function (iterable, fn, that, ENTRIES, ITERATOR) {\n  var boundFunction = bind(fn, that, ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, step;\n\n  if (ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);\n        if (result === BREAK) return BREAK;\n      } return;\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  while (!(step = iterator.next()).done) {\n    if (callWithSafeIterationClosing(iterator, boundFunction, step.value, ENTRIES) === BREAK) return BREAK;\n  }\n};\n\nexports.BREAK = BREAK;\n"]},"metadata":{},"sourceType":"script"}