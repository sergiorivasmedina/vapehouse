{"ast":null,"code":"'use strict';\n\nvar global = require('../internals/global');\n\nvar isForced = require('../internals/is-forced');\n\nvar has = require('../internals/has');\n\nvar classof = require('../internals/classof-raw');\n\nvar inheritIfRequired = require('../internals/inherit-if-required');\n\nvar toPrimitive = require('../internals/to-primitive');\n\nvar fails = require('../internals/fails');\n\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar internalStringTrim = require('../internals/string-trim');\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString\n\nvar BROKEN_CLASSOF = classof(require('../internals/object-create')(NumberPrototype)) == NUMBER;\nvar NATIVE_TRIM = ('trim' in String.prototype); // `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\n\nvar toNumber = function toNumber(argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, i, code;\n\n  if (typeof it == 'string' && it.length > 2) {\n    it = NATIVE_TRIM ? it.trim() : internalStringTrim(it, 3);\n    first = it.charCodeAt(0);\n\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66:\n        case 98:\n          radix = 2;\n          maxCode = 49;\n          break;\n        // fast equal of /^0b[01]+$/i\n\n        case 79:\n        case 111:\n          radix = 8;\n          maxCode = 55;\n          break;\n        // fast equal of /^0o[0-7]+$/i\n\n        default:\n          return +it;\n      }\n\n      digits = it.slice(2);\n      length = digits.length;\n\n      for (i = 0; i < length; i++) {\n        code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n\n        if (code < 48 || code > maxCode) return NaN;\n      }\n\n      return parseInt(digits, radix);\n    }\n  }\n\n  return +it;\n}; // `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\n\n\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof NumberWrapper // check on 1..constructor(foo) case\n    && (BROKEN_CLASSOF ? fails(function () {\n      NumberPrototype.valueOf.call(that);\n    }) : classof(that) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), that, NumberWrapper) : toNumber(it);\n  };\n\n  for (var keys = require('../internals/descriptors') ? getOwnPropertyNames(NativeNumber) : ( // ES3:\n  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):\n  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n\n  require('../internals/redefine')(global, NUMBER, NumberWrapper);\n}","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.number.constructor.js"],"names":["global","require","isForced","has","classof","inheritIfRequired","toPrimitive","fails","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","internalStringTrim","NUMBER","NativeNumber","NumberPrototype","prototype","BROKEN_CLASSOF","NATIVE_TRIM","String","toNumber","argument","it","first","third","radix","maxCode","digits","length","i","code","trim","charCodeAt","NaN","slice","parseInt","NumberWrapper","Number","value","arguments","that","valueOf","call","keys","split","j","key","constructor"],"mappings":"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","sourcesContent":["'use strict';\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof-raw');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar internalStringTrim = require('../internals/string-trim');\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(require('../internals/object-create')(NumberPrototype)) == NUMBER;\nvar NATIVE_TRIM = 'trim' in String.prototype;\n\n// `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, i, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = NATIVE_TRIM ? it.trim() : internalStringTrim(it, 3);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (i = 0; i < length; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(that); }) : classof(that) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), that, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = require('../internals/descriptors') ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  require('../internals/redefine')(global, NUMBER, NumberWrapper);\n}\n"]},"metadata":{},"sourceType":"script"}