{"ast":null,"code":"'use strict';\n\nvar toLength = require('../internals/to-length');\n\nvar toOffset = require('../internals/to-offset');\n\nvar toObject = require('../internals/to-object');\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\n\nvar FORCED = require('../internals/fails')(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).set({});\n}); // `%TypedArray%.prototype.set` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set\n\n\nArrayBufferViewCore.exportProto('set', function set(arrayLike\n/* , offset */\n) {\n  aTypedArray(this);\n  var offset = toOffset(arguments[1], 1);\n  var length = this.length;\n  var src = toObject(arrayLike);\n  var len = toLength(src.length);\n  var index = 0;\n  if (len + offset > length) throw RangeError('Wrong length');\n\n  while (index < len) {\n    this[offset + index] = src[index++];\n  }\n}, FORCED);","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.typed-array.set.js"],"names":["toLength","require","toOffset","toObject","ArrayBufferViewCore","aTypedArray","FORCED","Int8Array","set","exportProto","arrayLike","offset","arguments","length","src","len","index","RangeError"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAII,WAAW,GAAGD,mBAAmB,CAACC,WAAtC;;AAEA,IAAIC,MAAM,GAAGL,OAAO,CAAC,oBAAD,CAAP,CAA8B,YAAY;AACrD;AACA,MAAIM,SAAJ,CAAc,CAAd,EAAiBC,GAAjB,CAAqB,EAArB;AACD,CAHY,CAAb,C,CAKA;AACA;;;AACAJ,mBAAmB,CAACK,WAApB,CAAgC,KAAhC,EAAuC,SAASD,GAAT,CAAaE;AAAU;AAAvB,EAAuC;AAC5EL,EAAAA,WAAW,CAAC,IAAD,CAAX;AACA,MAAIM,MAAM,GAAGT,QAAQ,CAACU,SAAS,CAAC,CAAD,CAAV,EAAe,CAAf,CAArB;AACA,MAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIC,GAAG,GAAGX,QAAQ,CAACO,SAAD,CAAlB;AACA,MAAIK,GAAG,GAAGf,QAAQ,CAACc,GAAG,CAACD,MAAL,CAAlB;AACA,MAAIG,KAAK,GAAG,CAAZ;AACA,MAAID,GAAG,GAAGJ,MAAN,GAAeE,MAAnB,EAA2B,MAAMI,UAAU,CAAC,cAAD,CAAhB;;AAC3B,SAAOD,KAAK,GAAGD,GAAf;AAAoB,SAAKJ,MAAM,GAAGK,KAAd,IAAuBF,GAAG,CAACE,KAAK,EAAN,CAA1B;AAApB;AACD,CATD,EASGV,MATH","sourcesContent":["'use strict';\nvar toLength = require('../internals/to-length');\nvar toOffset = require('../internals/to-offset');\nvar toObject = require('../internals/to-object');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\n\nvar FORCED = require('../internals/fails')(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).set({});\n});\n\n// `%TypedArray%.prototype.set` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set\nArrayBufferViewCore.exportProto('set', function set(arrayLike /* , offset */) {\n  aTypedArray(this);\n  var offset = toOffset(arguments[1], 1);\n  var length = this.length;\n  var src = toObject(arrayLike);\n  var len = toLength(src.length);\n  var index = 0;\n  if (len + offset > length) throw RangeError('Wrong length');\n  while (index < len) this[offset + index] = src[index++];\n}, FORCED);\n"]},"metadata":{},"sourceType":"script"}