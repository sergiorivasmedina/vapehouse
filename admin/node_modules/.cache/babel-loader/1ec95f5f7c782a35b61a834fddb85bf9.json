{"ast":null,"code":"'use strict';\n\nvar isArray = require('../internals/is-array');\n\nvar isObject = require('../internals/is-object');\n\nvar toObject = require('../internals/to-object');\n\nvar toLength = require('../internals/to-length');\n\nvar createProperty = require('../internals/create-property');\n\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar IS_CONCAT_SPREADABLE = require('../internals/well-known-symbol')('isConcatSpreadable');\n\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\nvar IS_CONCAT_SPREADABLE_SUPPORT = !require('../internals/fails')(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = require('../internals/array-method-has-species-support')('concat');\n\nvar isConcatSpreadable = function isConcatSpreadable(O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n\nrequire('../internals/export')({\n  target: 'Array',\n  proto: true,\n  forced: FORCED\n}, {\n  concat: function concat(arg) {\n    // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n\n        for (k = 0; k < len; k++, n++) {\n          if (k in E) createProperty(A, n, E[k]);\n        }\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n\n    A.length = n;\n    return A;\n  }\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.array.concat.js"],"names":["isArray","require","isObject","toObject","toLength","createProperty","arraySpeciesCreate","IS_CONCAT_SPREADABLE","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_INDEX_EXCEEDED","IS_CONCAT_SPREADABLE_SUPPORT","array","concat","SPECIES_SUPPORT","isConcatSpreadable","O","spreadable","undefined","FORCED","target","proto","forced","arg","A","n","i","k","length","len","E","arguments","TypeError"],"mappings":"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","sourcesContent":["'use strict';\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar IS_CONCAT_SPREADABLE = require('../internals/well-known-symbol')('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\nvar IS_CONCAT_SPREADABLE_SUPPORT = !require('../internals/fails')(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = require('../internals/array-method-has-species-support')('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\nrequire('../internals/export')({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}