{"ast":null,"code":"'use strict';\n\nvar hide = require('../internals/hide');\n\nvar redefine = require('../internals/redefine');\n\nvar fails = require('../internals/fails');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar regexpExec = require('../internals/regexp-exec');\n\nvar SPECIES = wellKnownSymbol('species');\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n\n  re.exec = function () {\n    var result = [];\n    result.groups = {\n      a: '7'\n    };\n    return result;\n  };\n\n  return ''.replace(re, '$<a>') !== '7';\n}); // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n\n  re.exec = function () {\n    return originalExec.apply(this, arguments);\n  };\n\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n\n    O[SYMBOL] = function () {\n      return 7;\n    };\n\n    return ''[KEY](O) != 7;\n  });\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    re.exec = function () {\n      execCalled = true;\n      return null;\n    };\n\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n\n      re.constructor[SPECIES] = function () {\n        return re;\n      };\n    }\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return {\n            done: true,\n            value: nativeRegExpMethod.call(regexp, str, arg2)\n          };\n        }\n\n        return {\n          done: true,\n          value: nativeMethod.call(str, regexp, arg2)\n        };\n      }\n\n      return {\n        done: false\n      };\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n    // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n    ? function (string, arg) {\n      return regexMethod.call(string, this, arg);\n    } // 21.2.5.6 RegExp.prototype[@@match](string)\n    // 21.2.5.9 RegExp.prototype[@@search](string)\n    : function (string) {\n      return regexMethod.call(string, this);\n    });\n    if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);\n  }\n};","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"],"names":["hide","require","redefine","fails","wellKnownSymbol","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","exec","result","groups","a","replace","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","apply","arguments","split","length","module","exports","KEY","sham","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","constructor","nativeRegExpMethod","methods","nativeMethod","regexp","str","arg2","forceStringMethod","done","value","call","stringMethod","regexMethod","String","prototype","RegExp","string","arg"],"mappings":"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","sourcesContent":["'use strict';\nvar hide = require('../internals/hide');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n    if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}