{"ast":null,"code":"'use strict';\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar floor = Math.floor; // `%TypedArray%.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse\n\nArrayBufferViewCore.exportProto('reverse', function reverse() {\n  var that = this;\n  var length = aTypedArray(that).length;\n  var middle = floor(length / 2);\n  var index = 0;\n  var value;\n\n  while (index < middle) {\n    value = that[index];\n    that[index++] = that[--length];\n    that[length] = value;\n  }\n\n  return that;\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/core-js/modules/es.typed-array.reverse.js"],"names":["ArrayBufferViewCore","require","aTypedArray","floor","Math","exportProto","reverse","that","length","middle","index","value"],"mappings":"AAAA;;AACA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,qCAAD,CAAjC;;AAEA,IAAIC,WAAW,GAAGF,mBAAmB,CAACE,WAAtC;AACA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAjB,C,CAEA;AACA;;AACAH,mBAAmB,CAACK,WAApB,CAAgC,SAAhC,EAA2C,SAASC,OAAT,GAAmB;AAC5D,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,MAAM,GAAGN,WAAW,CAACK,IAAD,CAAX,CAAkBC,MAA/B;AACA,MAAIC,MAAM,GAAGN,KAAK,CAACK,MAAM,GAAG,CAAV,CAAlB;AACA,MAAIE,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AACA,SAAOD,KAAK,GAAGD,MAAf,EAAuB;AACrBE,IAAAA,KAAK,GAAGJ,IAAI,CAACG,KAAD,CAAZ;AACAH,IAAAA,IAAI,CAACG,KAAK,EAAN,CAAJ,GAAgBH,IAAI,CAAC,EAAEC,MAAH,CAApB;AACAD,IAAAA,IAAI,CAACC,MAAD,CAAJ,GAAeG,KAAf;AACD;;AAAC,SAAOJ,IAAP;AACH,CAXD","sourcesContent":["'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar floor = Math.floor;\n\n// `%TypedArray%.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse\nArrayBufferViewCore.exportProto('reverse', function reverse() {\n  var that = this;\n  var length = aTypedArray(that).length;\n  var middle = floor(length / 2);\n  var index = 0;\n  var value;\n  while (index < middle) {\n    value = that[index];\n    that[index++] = that[--length];\n    that[length] = value;\n  } return that;\n});\n"]},"metadata":{},"sourceType":"script"}