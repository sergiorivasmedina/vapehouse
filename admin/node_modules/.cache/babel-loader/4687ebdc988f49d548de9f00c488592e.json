{"ast":null,"code":"'use strict';\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar arraySlice = [].slice;\n\nvar FORCED = require('../internals/fails')(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).slice();\n}); // `%TypedArray%.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice\n\n\nArrayBufferViewCore.exportProto('slice', function slice(start, end) {\n  var list = arraySlice.call(aTypedArray(this), start, end);\n  var C = speciesConstructor(this, this.constructor);\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n\n  while (length > index) {\n    result[index] = list[index++];\n  }\n\n  return result;\n}, FORCED);","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.typed-array.slice.js"],"names":["speciesConstructor","require","ArrayBufferViewCore","aTypedArray","aTypedArrayConstructor","arraySlice","slice","FORCED","Int8Array","exportProto","start","end","list","call","C","constructor","index","length","result"],"mappings":"AAAA;;AACA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIE,WAAW,GAAGD,mBAAmB,CAACC,WAAtC;AACA,IAAIC,sBAAsB,GAAGF,mBAAmB,CAACE,sBAAjD;AACA,IAAIC,UAAU,GAAG,GAAGC,KAApB;;AAEA,IAAIC,MAAM,GAAGN,OAAO,CAAC,oBAAD,CAAP,CAA8B,YAAY;AACrD;AACA,MAAIO,SAAJ,CAAc,CAAd,EAAiBF,KAAjB;AACD,CAHY,CAAb,C,CAKA;AACA;;;AACAJ,mBAAmB,CAACO,WAApB,CAAgC,OAAhC,EAAyC,SAASH,KAAT,CAAeI,KAAf,EAAsBC,GAAtB,EAA2B;AAClE,MAAIC,IAAI,GAAGP,UAAU,CAACQ,IAAX,CAAgBV,WAAW,CAAC,IAAD,CAA3B,EAAmCO,KAAnC,EAA0CC,GAA1C,CAAX;AACA,MAAIG,CAAC,GAAGd,kBAAkB,CAAC,IAAD,EAAO,KAAKe,WAAZ,CAA1B;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACK,MAAlB;AACA,MAAIC,MAAM,GAAG,KAAKd,sBAAsB,CAACU,CAAD,CAA3B,EAAgCG,MAAhC,CAAb;;AACA,SAAOA,MAAM,GAAGD,KAAhB;AAAuBE,IAAAA,MAAM,CAACF,KAAD,CAAN,GAAgBJ,IAAI,CAACI,KAAK,EAAN,CAApB;AAAvB;;AACA,SAAOE,MAAP;AACD,CARD,EAQGX,MARH","sourcesContent":["'use strict';\nvar speciesConstructor = require('../internals/species-constructor');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar arraySlice = [].slice;\n\nvar FORCED = require('../internals/fails')(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).slice();\n});\n\n// `%TypedArray%.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice\nArrayBufferViewCore.exportProto('slice', function slice(start, end) {\n  var list = arraySlice.call(aTypedArray(this), start, end);\n  var C = speciesConstructor(this, this.constructor);\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n}, FORCED);\n"]},"metadata":{},"sourceType":"script"}