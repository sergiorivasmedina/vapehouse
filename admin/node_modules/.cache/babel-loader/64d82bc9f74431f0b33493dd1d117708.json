{"ast":null,"code":"var global = require('../internals/global');\n\nvar DOMIterables = require('../internals/dom-iterables');\n\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\n\nvar hide = require('../internals/hide');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      hide(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/core-js/modules/web.dom-collections.iterator.js"],"names":["global","require","DOMIterables","ArrayIteratorMethods","hide","wellKnownSymbol","ITERATOR","TO_STRING_TAG","ArrayValues","values","COLLECTION_NAME","Collection","CollectionPrototype","prototype","error","METHOD_NAME"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,4BAAD,CAA1B;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,8BAAD,CAAlC;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,mBAAD,CAAlB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,gCAAD,CAA7B;;AAEA,IAAIK,QAAQ,GAAGD,eAAe,CAAC,UAAD,CAA9B;AACA,IAAIE,aAAa,GAAGF,eAAe,CAAC,aAAD,CAAnC;AACA,IAAIG,WAAW,GAAGL,oBAAoB,CAACM,MAAvC;;AAEA,KAAK,IAAIC,eAAT,IAA4BR,YAA5B,EAA0C;AACxC,MAAIS,UAAU,GAAGX,MAAM,CAACU,eAAD,CAAvB;AACA,MAAIE,mBAAmB,GAAGD,UAAU,IAAIA,UAAU,CAACE,SAAnD;;AACA,MAAID,mBAAJ,EAAyB;AACvB;AACA,QAAIA,mBAAmB,CAACN,QAAD,CAAnB,KAAkCE,WAAtC,EAAmD,IAAI;AACrDJ,MAAAA,IAAI,CAACQ,mBAAD,EAAsBN,QAAtB,EAAgCE,WAAhC,CAAJ;AACD,KAFkD,CAEjD,OAAOM,KAAP,EAAc;AACdF,MAAAA,mBAAmB,CAACN,QAAD,CAAnB,GAAgCE,WAAhC;AACD;AACD,QAAI,CAACI,mBAAmB,CAACL,aAAD,CAAxB,EAAyCH,IAAI,CAACQ,mBAAD,EAAsBL,aAAtB,EAAqCG,eAArC,CAAJ;AACzC,QAAIR,YAAY,CAACQ,eAAD,CAAhB,EAAmC,KAAK,IAAIK,WAAT,IAAwBZ,oBAAxB,EAA8C;AAC/E;AACA,UAAIS,mBAAmB,CAACG,WAAD,CAAnB,KAAqCZ,oBAAoB,CAACY,WAAD,CAA7D,EAA4E,IAAI;AAC9EX,QAAAA,IAAI,CAACQ,mBAAD,EAAsBG,WAAtB,EAAmCZ,oBAAoB,CAACY,WAAD,CAAvD,CAAJ;AACD,OAF2E,CAE1E,OAAOD,KAAP,EAAc;AACdF,QAAAA,mBAAmB,CAACG,WAAD,CAAnB,GAAmCZ,oBAAoB,CAACY,WAAD,CAAvD;AACD;AACF;AACF;AACF","sourcesContent":["var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\nvar hide = require('../internals/hide');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      hide(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}