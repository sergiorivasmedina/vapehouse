{"ast":null,"code":"'use strict';\n\nvar anObject = require('../internals/an-object');\n\nvar aFunction = require('../internals/a-function');\n\nvar getSetIterator = require('../internals/get-set-iterator'); // `Set.prototype.reduce` method\n// https://github.com/tc39/proposal-collection-methods\n\n\nrequire('../internals/export')({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: require('../internals/is-pure')\n}, {\n  reduce: function reduce(callbackfn\n  /* , initialValue */\n  ) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var accumulator, step, value;\n    aFunction(callbackfn);\n    if (arguments.length > 1) accumulator = arguments[1];else {\n      step = iterator.next();\n      if (step.done) throw TypeError('Reduce of empty set with no initial value');\n      accumulator = step.value;\n    }\n\n    while (!(step = iterator.next()).done) {\n      accumulator = callbackfn(accumulator, value = step.value, value, set);\n    }\n\n    return accumulator;\n  }\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/esnext.set.reduce.js"],"names":["anObject","require","aFunction","getSetIterator","target","proto","real","forced","reduce","callbackfn","set","iterator","accumulator","step","value","arguments","length","next","done","TypeError"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,+BAAD,CAA5B,C,CAEA;AACA;;;AACAA,OAAO,CAAC,qBAAD,CAAP,CAA+B;AAAEG,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEN,OAAO,CAAC,sBAAD;AAAzD,CAA/B,EAAoH;AAClHO,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC;AAAW;AAA3B,IAAiD;AACvD,QAAIC,GAAG,GAAGV,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIW,QAAQ,GAAGR,cAAc,CAACO,GAAD,CAA7B;AACA,QAAIE,WAAJ,EAAiBC,IAAjB,EAAuBC,KAAvB;AACAZ,IAAAA,SAAS,CAACO,UAAD,CAAT;AACA,QAAIM,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0BJ,WAAW,GAAGG,SAAS,CAAC,CAAD,CAAvB,CAA1B,KACK;AACHF,MAAAA,IAAI,GAAGF,QAAQ,CAACM,IAAT,EAAP;AACA,UAAIJ,IAAI,CAACK,IAAT,EAAe,MAAMC,SAAS,CAAC,2CAAD,CAAf;AACfP,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAnB;AACD;;AACD,WAAO,CAAC,CAACD,IAAI,GAAGF,QAAQ,CAACM,IAAT,EAAR,EAAyBC,IAAjC,EAAuC;AACrCN,MAAAA,WAAW,GAAGH,UAAU,CAACG,WAAD,EAAcE,KAAK,GAAGD,IAAI,CAACC,KAA3B,EAAkCA,KAAlC,EAAyCJ,GAAzC,CAAxB;AACD;;AACD,WAAOE,WAAP;AACD;AAhBiH,CAApH","sourcesContent":["'use strict';\nvar anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar getSetIterator = require('../internals/get-set-iterator');\n\n// `Set.prototype.reduce` method\n// https://github.com/tc39/proposal-collection-methods\nrequire('../internals/export')({ target: 'Set', proto: true, real: true, forced: require('../internals/is-pure') }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var accumulator, step, value;\n    aFunction(callbackfn);\n    if (arguments.length > 1) accumulator = arguments[1];\n    else {\n      step = iterator.next();\n      if (step.done) throw TypeError('Reduce of empty set with no initial value');\n      accumulator = step.value;\n    }\n    while (!(step = iterator.next()).done) {\n      accumulator = callbackfn(accumulator, value = step.value, value, set);\n    }\n    return accumulator;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}