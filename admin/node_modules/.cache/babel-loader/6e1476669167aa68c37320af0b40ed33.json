{"ast":null,"code":"'use strict';\n\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-arrays-constructors-requires-wrappers');\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor; // `%TypedArray%.of` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.of\n\nArrayBufferViewCore.exportStatic('of', function of()\n/* ...items */\n{\n  var index = 0;\n  var length = arguments.length;\n  var result = new (aTypedArrayConstructor(this))(length);\n\n  while (length > index) {\n    result[index] = arguments[index++];\n  }\n\n  return result;\n}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.typed-array.of.js"],"names":["TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS","require","ArrayBufferViewCore","aTypedArrayConstructor","exportStatic","of","index","length","arguments","result"],"mappings":"AAAA;;AACA,IAAIA,2CAA2C,GAAGC,OAAO,CAAC,0DAAD,CAAzD;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIE,sBAAsB,GAAGD,mBAAmB,CAACC,sBAAjD,C,CAEA;AACA;;AACAD,mBAAmB,CAACE,YAApB,CAAiC,IAAjC,EAAuC,SAASC,EAAT;AAAY;AAAgB;AACjE,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAGC,SAAS,CAACD,MAAvB;AACA,MAAIE,MAAM,GAAG,KAAKN,sBAAsB,CAAC,IAAD,CAA3B,EAAmCI,MAAnC,CAAb;;AACA,SAAOA,MAAM,GAAGD,KAAhB;AAAuBG,IAAAA,MAAM,CAACH,KAAD,CAAN,GAAgBE,SAAS,CAACF,KAAK,EAAN,CAAzB;AAAvB;;AACA,SAAOG,MAAP;AACD,CAND,EAMGT,2CANH","sourcesContent":["'use strict';\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-arrays-constructors-requires-wrappers');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\n\n// `%TypedArray%.of` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.of\nArrayBufferViewCore.exportStatic('of', function of(/* ...items */) {\n  var index = 0;\n  var length = arguments.length;\n  var result = new (aTypedArrayConstructor(this))(length);\n  while (length > index) result[index] = arguments[index++];\n  return result;\n}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);\n"]},"metadata":{},"sourceType":"script"}