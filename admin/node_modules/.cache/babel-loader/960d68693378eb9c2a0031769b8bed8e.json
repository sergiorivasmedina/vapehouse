{"ast":null,"code":"'use strict';\n\nvar toLength = require('../internals/to-length');\n\nvar validateArguments = require('../internals/validate-string-method-arguments');\n\nvar STARTS_WITH = 'startsWith';\n\nvar CORRECT_IS_REGEXP_LOGIC = require('../internals/correct-is-regexp-logic')(STARTS_WITH);\n\nvar nativeStartsWith = ''[STARTS_WITH]; // `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n\nrequire('../internals/export')({\n  target: 'String',\n  proto: true,\n  forced: !CORRECT_IS_REGEXP_LOGIC\n}, {\n  startsWith: function startsWith(searchString\n  /* , position = 0 */\n  ) {\n    var that = validateArguments(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith ? nativeStartsWith.call(that, search, index) : that.slice(index, index + search.length) === search;\n  }\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.string.starts-with.js"],"names":["toLength","require","validateArguments","STARTS_WITH","CORRECT_IS_REGEXP_LOGIC","nativeStartsWith","target","proto","forced","startsWith","searchString","that","index","Math","min","arguments","length","undefined","search","String","call","slice"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,+CAAD,CAA/B;;AACA,IAAIE,WAAW,GAAG,YAAlB;;AACA,IAAIC,uBAAuB,GAAGH,OAAO,CAAC,sCAAD,CAAP,CAAgDE,WAAhD,CAA9B;;AACA,IAAIE,gBAAgB,GAAG,GAAGF,WAAH,CAAvB,C,CAEA;AACA;;AACAF,OAAO,CAAC,qBAAD,CAAP,CAA+B;AAAEK,EAAAA,MAAM,EAAE,QAAV;AAAoBC,EAAAA,KAAK,EAAE,IAA3B;AAAiCC,EAAAA,MAAM,EAAE,CAACJ;AAA1C,CAA/B,EAAoG;AAClGK,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC;AAAa;AAAjC,IAAuD;AACjE,QAAIC,IAAI,GAAGT,iBAAiB,CAAC,IAAD,EAAOQ,YAAP,EAAqBP,WAArB,CAA5B;AACA,QAAIS,KAAK,GAAGZ,QAAQ,CAACa,IAAI,CAACC,GAAL,CAASC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAA/C,EAA0DN,IAAI,CAACK,MAA/D,CAAD,CAApB;AACA,QAAIE,MAAM,GAAGC,MAAM,CAACT,YAAD,CAAnB;AACA,WAAOL,gBAAgB,GACnBA,gBAAgB,CAACe,IAAjB,CAAsBT,IAAtB,EAA4BO,MAA5B,EAAoCN,KAApC,CADmB,GAEnBD,IAAI,CAACU,KAAL,CAAWT,KAAX,EAAkBA,KAAK,GAAGM,MAAM,CAACF,MAAjC,MAA6CE,MAFjD;AAGD;AARiG,CAApG","sourcesContent":["'use strict';\nvar toLength = require('../internals/to-length');\nvar validateArguments = require('../internals/validate-string-method-arguments');\nvar STARTS_WITH = 'startsWith';\nvar CORRECT_IS_REGEXP_LOGIC = require('../internals/correct-is-regexp-logic')(STARTS_WITH);\nvar nativeStartsWith = ''[STARTS_WITH];\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\nrequire('../internals/export')({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = validateArguments(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}