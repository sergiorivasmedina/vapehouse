{"ast":null,"code":"'use strict';\n\nvar internalFind = require('../internals/array-methods')(5);\n\nvar FIND = 'find';\nvar SKIPS_HOLES = true; // Shouldn't skip holes\n\nif (FIND in []) Array(1)[FIND](function () {\n  SKIPS_HOLES = false;\n}); // `Array.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n\nrequire('../internals/export')({\n  target: 'Array',\n  proto: true,\n  forced: SKIPS_HOLES\n}, {\n  find: function find(callbackfn\n  /* , that = undefined */\n  ) {\n    return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n}); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\n\n\nrequire('../internals/add-to-unscopables')(FIND);","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.array.find.js"],"names":["internalFind","require","FIND","SKIPS_HOLES","Array","target","proto","forced","find","callbackfn","arguments","length","undefined"],"mappings":"AAAA;;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,4BAAD,CAAP,CAAsC,CAAtC,CAAnB;;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,WAAW,GAAG,IAAlB,C,CAEA;;AACA,IAAID,IAAI,IAAI,EAAZ,EAAgBE,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,EAAe,YAAY;AAAEC,EAAAA,WAAW,GAAG,KAAd;AAAsB,CAAnD,E,CAEhB;AACA;;AACAF,OAAO,CAAC,qBAAD,CAAP,CAA+B;AAAEI,EAAAA,MAAM,EAAE,OAAV;AAAmBC,EAAAA,KAAK,EAAE,IAA1B;AAAgCC,EAAAA,MAAM,EAAEJ;AAAxC,CAA/B,EAAsF;AACpFK,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC;AAAW;AAAzB,IAAmD;AACvD,WAAOT,YAAY,CAAC,IAAD,EAAOS,UAAP,EAAmBC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAzD,CAAnB;AACD;AAHmF,CAAtF,E,CAMA;;;AACAX,OAAO,CAAC,iCAAD,CAAP,CAA2CC,IAA3C","sourcesContent":["'use strict';\nvar internalFind = require('../internals/array-methods')(5);\nvar FIND = 'find';\nvar SKIPS_HOLES = true;\n\n// Shouldn't skip holes\nif (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\nrequire('../internals/export')({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {\n  find: function find(callbackfn /* , that = undefined */) {\n    return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nrequire('../internals/add-to-unscopables')(FIND);\n"]},"metadata":{},"sourceType":"script"}