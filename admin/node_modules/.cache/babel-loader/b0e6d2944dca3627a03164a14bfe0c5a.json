{"ast":null,"code":"var toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar fromCharCode = String.fromCharCode;\nvar nativeFromCodePoint = String.fromCodePoint; // length should be 1, old FF problem\n\nvar INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1; // `String.fromCodePoint` method\n// https://tc39.github.io/ecma262/#sec-string.fromcodepoint\n\nrequire('../internals/export')({\n  target: 'String',\n  stat: true,\n  forced: INCORRECT_LENGTH\n}, {\n  fromCodePoint: function fromCodePoint(x) {\n    // eslint-disable-line no-unused-vars\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\n      elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));\n    }\n\n    return elements.join('');\n  }\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.string.from-code-point.js"],"names":["toAbsoluteIndex","require","fromCharCode","String","nativeFromCodePoint","fromCodePoint","INCORRECT_LENGTH","length","target","stat","forced","x","elements","arguments","i","code","RangeError","push","join"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,gCAAD,CAA7B;;AACA,IAAIC,YAAY,GAAGC,MAAM,CAACD,YAA1B;AACA,IAAIE,mBAAmB,GAAGD,MAAM,CAACE,aAAjC,C,CAEA;;AACA,IAAIC,gBAAgB,GAAG,CAAC,CAACF,mBAAF,IAAyBA,mBAAmB,CAACG,MAApB,IAA8B,CAA9E,C,CAEA;AACA;;AACAN,OAAO,CAAC,qBAAD,CAAP,CAA+B;AAAEO,EAAAA,MAAM,EAAE,QAAV;AAAoBC,EAAAA,IAAI,EAAE,IAA1B;AAAgCC,EAAAA,MAAM,EAAEJ;AAAxC,CAA/B,EAA2F;AACzFD,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBM,CAAvB,EAA0B;AAAE;AACzC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIL,MAAM,GAAGM,SAAS,CAACN,MAAvB;AACA,QAAIO,CAAC,GAAG,CAAR;AACA,QAAIC,IAAJ;;AACA,WAAOR,MAAM,GAAGO,CAAhB,EAAmB;AACjBC,MAAAA,IAAI,GAAG,CAACF,SAAS,CAACC,CAAC,EAAF,CAAjB;AACA,UAAId,eAAe,CAACe,IAAD,EAAO,QAAP,CAAf,KAAoCA,IAAxC,EAA8C,MAAMC,UAAU,CAACD,IAAI,GAAG,4BAAR,CAAhB;AAC9CH,MAAAA,QAAQ,CAACK,IAAT,CAAcF,IAAI,GAAG,OAAP,GACVb,YAAY,CAACa,IAAD,CADF,GAEVb,YAAY,CAAC,CAAC,CAACa,IAAI,IAAI,OAAT,KAAqB,EAAtB,IAA4B,MAA7B,EAAqCA,IAAI,GAAG,KAAP,GAAe,MAApD,CAFhB;AAID;;AAAC,WAAOH,QAAQ,CAACM,IAAT,CAAc,EAAd,CAAP;AACH;AAdwF,CAA3F","sourcesContent":["var toAbsoluteIndex = require('../internals/to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar nativeFromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\nvar INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;\n\n// `String.fromCodePoint` method\n// https://tc39.github.io/ecma262/#sec-string.fromcodepoint\nrequire('../internals/export')({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\n      elements.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)\n      );\n    } return elements.join('');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}