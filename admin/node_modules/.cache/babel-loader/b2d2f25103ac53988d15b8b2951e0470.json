{"ast":null,"code":"'use strict';\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse\n\nArrayBufferViewCore.exportProto('reverse', function reverse() {\n  var that = this;\n  var length = aTypedArray(that).length;\n  var middle = Math.floor(length / 2);\n  var index = 0;\n  var value;\n\n  while (index < middle) {\n    value = that[index];\n    that[index++] = that[--length];\n    that[length] = value;\n  }\n\n  return that;\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.typed-array.reverse.js"],"names":["ArrayBufferViewCore","require","aTypedArray","exportProto","reverse","that","length","middle","Math","floor","index","value"],"mappings":"AAAA;;AACA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIC,WAAW,GAAGF,mBAAmB,CAACE,WAAtC,C,CAEA;AACA;;AACAF,mBAAmB,CAACG,WAApB,CAAgC,SAAhC,EAA2C,SAASC,OAAT,GAAmB;AAC5D,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,MAAM,GAAGJ,WAAW,CAACG,IAAD,CAAX,CAAkBC,MAA/B;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,CAApB,CAAb;AACA,MAAII,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AACA,SAAOD,KAAK,GAAGH,MAAf,EAAuB;AACrBI,IAAAA,KAAK,GAAGN,IAAI,CAACK,KAAD,CAAZ;AACAL,IAAAA,IAAI,CAACK,KAAK,EAAN,CAAJ,GAAgBL,IAAI,CAAC,EAAEC,MAAH,CAApB;AACAD,IAAAA,IAAI,CAACC,MAAD,CAAJ,GAAeK,KAAf;AACD;;AAAC,SAAON,IAAP;AACH,CAXD","sourcesContent":["'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\n\n// `%TypedArray%.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse\nArrayBufferViewCore.exportProto('reverse', function reverse() {\n  var that = this;\n  var length = aTypedArray(that).length;\n  var middle = Math.floor(length / 2);\n  var index = 0;\n  var value;\n  while (index < middle) {\n    value = that[index];\n    that[index++] = that[--length];\n    that[length] = value;\n  } return that;\n});\n"]},"metadata":{},"sourceType":"script"}