{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar hide = require('../internals/hide');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar anObject = require('../internals/an-object');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar getRegExpFlags = require('../internals/regexp-flags');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE_ALL = wellKnownSymbol('replaceAll');\nvar RegExpPrototype = RegExp.prototype;\n\nvar $replaceAll = function $replaceAll(string, replaceValue) {\n  var rx = anObject(this);\n  var flags = String('flags' in RegExpPrototype ? rx.flags : getRegExpFlags.call(rx));\n\n  if (!~flags.indexOf('g')) {\n    rx = new (speciesConstructor(rx, RegExp))(rx.source, flags + 'g');\n  }\n\n  return String(string).replace(rx, replaceValue);\n}; // `String.prototype.replaceAll` method\n// https://github.com/tc39/proposal-string-replace-all\n\n\n$({\n  target: 'String',\n  proto: true\n}, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var replacer, string, searchString, template, result, index;\n\n    if (searchValue != null) {\n      replacer = searchValue[REPLACE_ALL];\n\n      if (replacer !== undefined) {\n        return replacer.call(searchValue, O, replaceValue);\n      } else if (IS_PURE && isRegExp(searchValue)) {\n        return $replaceAll.call(searchValue, O, replaceValue);\n      }\n    }\n\n    string = String(O);\n    searchString = String(searchValue);\n    template = string.split(searchString);\n\n    if (typeof replaceValue !== 'function') {\n      return template.join(String(replaceValue));\n    }\n\n    result = template[0];\n\n    for (index = 1; index < template.length; index++) {\n      result += String(replaceValue(searchString, index - 1, string));\n      result += template[index];\n    }\n\n    return result;\n  }\n});\nIS_PURE || REPLACE_ALL in RegExpPrototype || hide(RegExpPrototype, REPLACE_ALL, $replaceAll);","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/core-js/modules/esnext.string.replace-all.js"],"names":["$","require","hide","requireObjectCoercible","anObject","isRegExp","getRegExpFlags","speciesConstructor","wellKnownSymbol","IS_PURE","REPLACE_ALL","RegExpPrototype","RegExp","prototype","$replaceAll","string","replaceValue","rx","flags","String","call","indexOf","source","replace","target","proto","replaceAll","searchValue","O","replacer","searchString","template","result","index","undefined","split","join","length"],"mappings":"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","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar hide = require('../internals/hide');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar anObject = require('../internals/an-object');\nvar isRegExp = require('../internals/is-regexp');\nvar getRegExpFlags = require('../internals/regexp-flags');\nvar speciesConstructor = require('../internals/species-constructor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE_ALL = wellKnownSymbol('replaceAll');\nvar RegExpPrototype = RegExp.prototype;\n\nvar $replaceAll = function (string, replaceValue) {\n  var rx = anObject(this);\n  var flags = String('flags' in RegExpPrototype ? rx.flags : getRegExpFlags.call(rx));\n  if (!~flags.indexOf('g')) {\n    rx = new (speciesConstructor(rx, RegExp))(rx.source, flags + 'g');\n  }\n  return String(string).replace(rx, replaceValue);\n};\n\n// `String.prototype.replaceAll` method\n// https://github.com/tc39/proposal-string-replace-all\n$({ target: 'String', proto: true }, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var replacer, string, searchString, template, result, index;\n    if (searchValue != null) {\n      replacer = searchValue[REPLACE_ALL];\n      if (replacer !== undefined) {\n        return replacer.call(searchValue, O, replaceValue);\n      } else if (IS_PURE && isRegExp(searchValue)) {\n        return $replaceAll.call(searchValue, O, replaceValue);\n      }\n    }\n    string = String(O);\n    searchString = String(searchValue);\n    template = string.split(searchString);\n    if (typeof replaceValue !== 'function') {\n      return template.join(String(replaceValue));\n    }\n    result = template[0];\n    for (index = 1; index < template.length; index++) {\n      result += String(replaceValue(searchString, index - 1, string));\n      result += template[index];\n    }\n    return result;\n  }\n});\n\nIS_PURE || REPLACE_ALL in RegExpPrototype || hide(RegExpPrototype, REPLACE_ALL, $replaceAll);\n"]},"metadata":{},"sourceType":"script"}