{"ast":null,"code":"'use strict';\n\nvar anObject = require('../internals/an-object');\n\nvar fails = require('../internals/fails');\n\nvar flags = require('../internals/regexp-flags');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar TO_STRING = 'toString';\nvar nativeToString = /./[TO_STRING];\nvar NOT_GENERIC = fails(function () {\n  return nativeToString.call({\n    source: 'a',\n    flags: 'b'\n  }) != '/a/b';\n}); // FF44- RegExp#toString has a wrong name\n\nvar INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\n\nif (NOT_GENERIC || INCORRECT_NAME) {\n  require('../internals/redefine')(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? flags.call(R) : undefined);\n  }, {\n    unsafe: true\n  });\n}","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/modules/es.regexp.to-string.js"],"names":["anObject","require","fails","flags","DESCRIPTORS","TO_STRING","nativeToString","NOT_GENERIC","call","source","INCORRECT_NAME","name","RegExp","prototype","toString","R","concat","undefined","unsafe"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAAnB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,2BAAD,CAAnB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAII,SAAS,GAAG,UAAhB;AACA,IAAIC,cAAc,GAAG,IAAID,SAAJ,CAArB;AAEA,IAAIE,WAAW,GAAGL,KAAK,CAAC,YAAY;AAAE,SAAOI,cAAc,CAACE,IAAf,CAAoB;AAAEC,IAAAA,MAAM,EAAE,GAAV;AAAeN,IAAAA,KAAK,EAAE;AAAtB,GAApB,KAAoD,MAA3D;AAAoE,CAAnF,CAAvB,C,CACA;;AACA,IAAIO,cAAc,GAAGJ,cAAc,CAACK,IAAf,IAAuBN,SAA5C,C,CAEA;AACA;;AACA,IAAIE,WAAW,IAAIG,cAAnB,EAAmC;AACjCT,EAAAA,OAAO,CAAC,uBAAD,CAAP,CAAiCW,MAAM,CAACC,SAAxC,EAAmDR,SAAnD,EAA8D,SAASS,QAAT,GAAoB;AAChF,QAAIC,CAAC,GAAGf,QAAQ,CAAC,IAAD,CAAhB;AACA,WAAO,IAAIgB,MAAJ,CAAWD,CAAC,CAACN,MAAb,EAAqB,GAArB,EACL,WAAWM,CAAX,GAAeA,CAAC,CAACZ,KAAjB,GAAyB,CAACC,WAAD,IAAgBW,CAAC,YAAYH,MAA7B,GAAsCT,KAAK,CAACK,IAAN,CAAWO,CAAX,CAAtC,GAAsDE,SAD1E,CAAP;AAED,GAJD,EAIG;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAJH;AAKD","sourcesContent":["'use strict';\nvar anObject = require('../internals/an-object');\nvar fails = require('../internals/fails');\nvar flags = require('../internals/regexp-flags');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar TO_STRING = 'toString';\nvar nativeToString = /./[TO_STRING];\n\nvar NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n// FF44- RegExp#toString has a wrong name\nvar INCORRECT_NAME = nativeToString.name != TO_STRING;\n\n// `RegExp.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\nif (NOT_GENERIC || INCORRECT_NAME) {\n  require('../internals/redefine')(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? flags.call(R) : undefined);\n  }, { unsafe: true });\n}\n"]},"metadata":{},"sourceType":"script"}