{"ast":null,"code":"var global = require('../internals/global');\n\nvar hide = require('../internals/hide');\n\nvar has = require('../internals/has');\n\nvar setGlobal = require('../internals/set-global');\n\nvar nativeFunctionToString = require('../internals/function-to-string');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(nativeFunctionToString).split('toString');\n\nrequire('../internals/shared')('inspectSource', function (it) {\n  return nativeFunctionToString.call(it);\n});\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n\n  if (O === global) {\n    if (simple) O[key] = value;else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n\n  if (simple) O[key] = value;else hide(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/react-app-polyfill/node_modules/core-js/internals/redefine.js"],"names":["global","require","hide","has","setGlobal","nativeFunctionToString","InternalStateModule","getInternalState","get","enforceInternalState","enforce","TEMPLATE","String","split","it","call","module","exports","O","key","value","options","unsafe","simple","enumerable","noTargetGet","source","join","Function","prototype","toString"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,mBAAD,CAAlB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAII,sBAAsB,GAAGJ,OAAO,CAAC,iCAAD,CAApC;;AACA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAIM,gBAAgB,GAAGD,mBAAmB,CAACE,GAA3C;AACA,IAAIC,oBAAoB,GAAGH,mBAAmB,CAACI,OAA/C;AACA,IAAIC,QAAQ,GAAGC,MAAM,CAACP,sBAAD,CAAN,CAA+BQ,KAA/B,CAAqC,UAArC,CAAf;;AAEAZ,OAAO,CAAC,qBAAD,CAAP,CAA+B,eAA/B,EAAgD,UAAUa,EAAV,EAAc;AAC5D,SAAOT,sBAAsB,CAACU,IAAvB,CAA4BD,EAA5B,CAAP;AACD,CAFD;;AAIA,CAACE,MAAM,CAACC,OAAP,GAAiB,UAAUC,CAAV,EAAaC,GAAb,EAAkBC,KAAlB,EAAyBC,OAAzB,EAAkC;AAClD,MAAIC,MAAM,GAAGD,OAAO,GAAG,CAAC,CAACA,OAAO,CAACC,MAAb,GAAsB,KAA1C;AACA,MAAIC,MAAM,GAAGF,OAAO,GAAG,CAAC,CAACA,OAAO,CAACG,UAAb,GAA0B,KAA9C;AACA,MAAIC,WAAW,GAAGJ,OAAO,GAAG,CAAC,CAACA,OAAO,CAACI,WAAb,GAA2B,KAApD;;AACA,MAAI,OAAOL,KAAP,IAAgB,UAApB,EAAgC;AAC9B,QAAI,OAAOD,GAAP,IAAc,QAAd,IAA0B,CAAChB,GAAG,CAACiB,KAAD,EAAQ,MAAR,CAAlC,EAAmDlB,IAAI,CAACkB,KAAD,EAAQ,MAAR,EAAgBD,GAAhB,CAAJ;AACnDV,IAAAA,oBAAoB,CAACW,KAAD,CAApB,CAA4BM,MAA5B,GAAqCf,QAAQ,CAACgB,IAAT,CAAc,OAAOR,GAAP,IAAc,QAAd,GAAyBA,GAAzB,GAA+B,EAA7C,CAArC;AACD;;AACD,MAAID,CAAC,KAAKlB,MAAV,EAAkB;AAChB,QAAIuB,MAAJ,EAAYL,CAAC,CAACC,GAAD,CAAD,GAASC,KAAT,CAAZ,KACKhB,SAAS,CAACe,GAAD,EAAMC,KAAN,CAAT;AACL;AACD,GAJD,MAIO,IAAI,CAACE,MAAL,EAAa;AAClB,WAAOJ,CAAC,CAACC,GAAD,CAAR;AACD,GAFM,MAEA,IAAI,CAACM,WAAD,IAAgBP,CAAC,CAACC,GAAD,CAArB,EAA4B;AACjCI,IAAAA,MAAM,GAAG,IAAT;AACD;;AACD,MAAIA,MAAJ,EAAYL,CAAC,CAACC,GAAD,CAAD,GAASC,KAAT,CAAZ,KACKlB,IAAI,CAACgB,CAAD,EAAIC,GAAJ,EAASC,KAAT,CAAJ,CAlB6C,CAmBpD;AACC,CApBD,EAoBGQ,QAAQ,CAACC,SApBZ,EAoBuB,UApBvB,EAoBmC,SAASC,QAAT,GAAoB;AACrD,SAAO,OAAO,IAAP,IAAe,UAAf,IAA6BvB,gBAAgB,CAAC,IAAD,CAAhB,CAAuBmB,MAApD,IAA8DrB,sBAAsB,CAACU,IAAvB,CAA4B,IAA5B,CAArE;AACD,CAtBD","sourcesContent":["var global = require('../internals/global');\nvar hide = require('../internals/hide');\nvar has = require('../internals/has');\nvar setGlobal = require('../internals/set-global');\nvar nativeFunctionToString = require('../internals/function-to-string');\nvar InternalStateModule = require('../internals/internal-state');\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(nativeFunctionToString).split('toString');\n\nrequire('../internals/shared')('inspectSource', function (it) {\n  return nativeFunctionToString.call(it);\n});\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else hide(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);\n});\n"]},"metadata":{},"sourceType":"script"}