{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar toLength = require('../internals/to-length');\n\nvar notARegExp = require('../internals/not-a-regexp');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\n\nvar nativeStartsWith = ''.startsWith;\nvar min = Math.min; // `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n\n$({\n  target: 'String',\n  proto: true,\n  forced: !correctIsRegExpLogic('startsWith')\n}, {\n  startsWith: function startsWith(searchString\n  /* , position = 0 */\n  ) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith ? nativeStartsWith.call(that, search, index) : that.slice(index, index + search.length) === search;\n  }\n});","map":{"version":3,"sources":["/home/sergio/Documentos/react-templates/vapehouse/admin/node_modules/core-js/modules/es.string.starts-with.js"],"names":["$","require","toLength","notARegExp","requireObjectCoercible","correctIsRegExpLogic","nativeStartsWith","startsWith","min","Math","target","proto","forced","searchString","that","String","index","arguments","length","undefined","search","call","slice"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,uCAAD,CAApC;;AACA,IAAII,oBAAoB,GAAGJ,OAAO,CAAC,sCAAD,CAAlC;;AAEA,IAAIK,gBAAgB,GAAG,GAAGC,UAA1B;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAf,C,CAEA;AACA;;AACAR,CAAC,CAAC;AAAEU,EAAAA,MAAM,EAAE,QAAV;AAAoBC,EAAAA,KAAK,EAAE,IAA3B;AAAiCC,EAAAA,MAAM,EAAE,CAACP,oBAAoB,CAAC,YAAD;AAA9D,CAAD,EAAiF;AAChFE,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBM;AAAa;AAAjC,IAAuD;AACjE,QAAIC,IAAI,GAAGC,MAAM,CAACX,sBAAsB,CAAC,IAAD,CAAvB,CAAjB;AACAD,IAAAA,UAAU,CAACU,YAAD,CAAV;AACA,QAAIG,KAAK,GAAGd,QAAQ,CAACM,GAAG,CAACS,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAvC,EAAkDL,IAAI,CAACI,MAAvD,CAAJ,CAApB;AACA,QAAIE,MAAM,GAAGL,MAAM,CAACF,YAAD,CAAnB;AACA,WAAOP,gBAAgB,GACnBA,gBAAgB,CAACe,IAAjB,CAAsBP,IAAtB,EAA4BM,MAA5B,EAAoCJ,KAApC,CADmB,GAEnBF,IAAI,CAACQ,KAAL,CAAWN,KAAX,EAAkBA,KAAK,GAAGI,MAAM,CAACF,MAAjC,MAA6CE,MAFjD;AAGD;AAT+E,CAAjF,CAAD","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\n\nvar nativeStartsWith = ''.startsWith;\nvar min = Math.min;\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('startsWith') }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}