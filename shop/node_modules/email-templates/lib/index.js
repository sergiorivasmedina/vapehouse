"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const fs = require('fs');

const path = require('path');

const I18N = require('@ladjs/i18n');

const _ = require('lodash');

const consolidate = require('consolidate');

const debug = require('debug')('email-templates');

const getPaths = require('get-paths');

const htmlToText = require('html-to-text');

const is = require('@sindresorhus/is');

const juice = require('juice');

const nodemailer = require('nodemailer');

const pify = require('pify');

const previewEmail = require('preview-email'); // promise version of `juice.juiceResources`


const juiceResources = (html, options) => {
  return new Promise((resolve, reject) => {
    juice.juiceResources(html, options, (err, html) => {
      if (err) return reject(err);
      resolve(html);
    });
  });
};

const env = (process.env.NODE_ENV || 'development').toLowerCase();
const stat = pify(fs.stat);
const readFile = pify(fs.readFile);

class Email {
  constructor(config = {}) {
    debug('config passed %O', config); // 2.x backwards compatible support

    if (config.juiceOptions) {
      config.juiceResources = config.juiceOptions;
      delete config.juiceOptions;
    }

    if (config.disableJuice) {
      config.juice = false;
      delete config.disableJuice;
    }

    if (config.render) {
      config.customRender = true;
    }

    this.config = _.merge({
      views: {
        // directory where email templates reside
        root: path.resolve('emails'),
        options: {
          // default file extension for template
          extension: 'pug',
          map: {
            hbs: 'handlebars',
            njk: 'nunjucks'
          },
          engineSource: consolidate
        },
        // locals to pass to templates for rendering
        locals: {
          // turn on caching for non-development environments
          cache: !['development', 'test'].includes(env),
          // pretty is automatically set to `false` for subject/text
          pretty: true
        }
      },
      // <https://nodemailer.com/message/>
      message: {},
      send: !['development', 'test'].includes(env),
      preview: env === 'development',
      // <https://github.com/ladjs/i18n>
      // set to an object to configure and enable it
      i18n: false,
      // pass a custom render function if necessary
      render: this.render.bind(this),
      customRender: false,
      // force text-only rendering of template (disregards template folder)
      textOnly: false,
      // <https://github.com/werk85/node-html-to-text>
      htmlToText: {
        ignoreImage: true
      },
      subjectPrefix: false,
      // <https://github.com/Automattic/juice>
      juice: true,
      juiceResources: {
        preserveImportant: true,
        webResources: {
          relativeTo: path.resolve('build'),
          images: false
        }
      },
      // pass a transport configuration object or a transport instance
      // (e.g. an instance is created via `nodemailer.createTransport`)
      // <https://nodemailer.com/transports/>
      transport: {},
      // last locale field name (also used by @ladjs/i18n)
      lastLocaleField: 'last_locale',

      getPath(type, template) {
        return path.join(template, type);
      }

    }, config); // override existing method

    this.render = this.config.render;
    if (!_.isFunction(this.config.transport.sendMail)) this.config.transport = nodemailer.createTransport(this.config.transport);
    debug('transformed config %O', this.config);
    this.juiceResources = this.juiceResources.bind(this);
    this.getTemplatePath = this.getTemplatePath.bind(this);
    this.templateExists = this.templateExists.bind(this);
    this.checkAndRender = this.checkAndRender.bind(this);
    this.render = this.render.bind(this);
    this.renderAll = this.renderAll.bind(this);
    this.send = this.send.bind(this);
  } // shorthand use of `juiceResources` with the config
  // (mainly for custom renders like from a database)


  juiceResources(html) {
    return juiceResources(html, this.config.juiceResources);
  } // a simple helper function that gets the actual file path for the template


  async getTemplatePath(template) {
    const [root, view] = path.isAbsolute(template) ? [path.dirname(template), path.basename(template)] : [this.config.views.root, template];
    const paths = await getPaths(root, view, this.config.views.options.extension);
    const filePath = path.resolve(root, paths.rel);
    return {
      filePath,
      paths
    };
  } // returns true or false if a template exists
  // (uses same look-up approach as `render` function)


  async templateExists(view) {
    try {
      const {
        filePath
      } = await this.getTemplatePath(view);
      const stats = await stat(filePath);
      if (!stats.isFile()) throw new Error(`${filePath} was not a file`);
      return true;
    } catch (err) {
      debug('templateExists', err);
      return false;
    }
  }

  async checkAndRender(type, template, locals) {
    const str = this.config.getPath(type, template, locals);

    if (!this.config.customRender) {
      const exists = await this.templateExists(str);
      if (!exists) return;
    }

    return this.render(str, _objectSpread({}, locals, {}, type === 'html' ? {} : {
      pretty: false
    }));
  } // promise version of consolidate's render
  // inspired by koa-views and re-uses the same config
  // <https://github.com/queckezz/koa-views>


  async render(view, locals = {}) {
    const {
      map,
      engineSource
    } = this.config.views.options;
    const {
      filePath,
      paths
    } = await this.getTemplatePath(view);

    if (paths.ext === 'html' && !map) {
      const res = await readFile(filePath, 'utf8');
      return res;
    }

    const engineName = map && map[paths.ext] ? map[paths.ext] : paths.ext;
    const renderFn = engineSource[engineName];
    if (!engineName || !renderFn) throw new Error(`Engine not found for the ".${paths.ext}" file extension`);

    if (_.isObject(this.config.i18n)) {
      if (this.config.i18n.lastLocaleField && this.config.lastLocaleField && this.config.i18n.lastLocaleField !== this.config.lastLocaleField) throw new Error(`The 'lastLocaleField' (String) option for @ladjs/i18n and email-templates do not match, i18n value was ${this.config.i18n.lastLocaleField} and email-templates value was ${this.config.lastLocaleField}`);
      const i18n = new I18N(_objectSpread({}, this.config.i18n, {
        register: locals
      })); // support `locals.user.last_locale` (variable based name lastLocaleField)
      // (e.g. for <https://lad.js.org>)

      if (_.isObject(locals.user) && _.isString(locals.user[this.config.lastLocaleField])) locals.locale = locals.user[this.config.lastLocaleField];
      if (_.isString(locals.locale)) i18n.setLocale(locals.locale);
    }

    const res = await pify(renderFn)(filePath, locals); // transform the html with juice using remote paths
    // google now supports media queries
    // https://developers.google.com/gmail/design/reference/supported_css

    if (!this.config.juice) return res;
    const html = await this.juiceResources(res);
    return html;
  }

  async renderAll(template, locals = {}, nodemailerMessage = {}) {
    const message = _objectSpread({}, nodemailerMessage);

    if (template) {
      const [subject, html, text] = await Promise.all(['subject', 'html', 'text'].map(type => this.checkAndRender(type, template, locals)));
      if (subject) message.subject = subject.trim();
      if (html) message.html = html;
      if (text) message.text = text;
    }

    if (message.subject && this.config.subjectPrefix) message.subject = this.config.subjectPrefix + message.subject;
    if (this.config.htmlToText && message.html && !message.text) // we'd use nodemailer-html-to-text plugin
      // but we really don't need to support cid
      // <https://github.com/andris9/nodemailer-html-to-text>
      message.text = htmlToText.fromString(message.html, this.config.htmlToText); // if we only want a text-based version of the email

    if (this.config.textOnly) delete message.html; // if no subject, html, or text content exists then we should
    // throw an error that says at least one must be found
    // otherwise the email would be blank (defeats purpose of email-templates)

    if ((!is.string(message.subject) || is.emptyStringOrWhitespace(message.subject)) && (!is.string(message.text) || is.emptyStringOrWhitespace(message.text)) && (!is.string(message.html) || is.emptyStringOrWhitespace(message.html)) && _.isArray(message.attachments) && _.isEmpty(message.attachments)) throw new Error(`No content was passed for subject, html, text, nor attachments message props. Check that the files for the template "${template}" exist.`);
    return message;
  }

  async send(options = {}) {
    options = _objectSpread({
      template: '',
      message: {},
      locals: {}
    }, options);
    let {
      template,
      message,
      locals
    } = options;
    const attachments = message.attachments || this.config.message.attachments || [];
    message = _.defaultsDeep({}, _.omit(message, 'attachments'), _.omit(this.config.message, 'attachments'));
    locals = _.defaultsDeep({}, this.config.views.locals, locals);
    if (attachments) message.attachments = attachments;
    debug('template %s', template);
    debug('message %O', message);
    debug('locals (keys only): %O', Object.keys(locals)); // get all available templates

    const obj = await this.renderAll(template, locals, message); // assign the object variables over to the message

    Object.assign(message, obj);

    if (this.config.preview) {
      debug('using `preview-email` to preview email');
      if (_.isObject(this.config.preview)) await previewEmail(message, this.config.preview);else await previewEmail(message);
    }

    if (!this.config.send) {
      debug('send disabled so we are ensuring JSONTransport'); // <https://github.com/nodemailer/nodemailer/issues/798>
      // if (this.config.transport.name !== 'JSONTransport')

      this.config.transport = nodemailer.createTransport({
        jsonTransport: true
      });
    }

    const res = await this.config.transport.sendMail(message);
    debug('message sent');
    res.originalMessage = message;
    return res;
  }

}

module.exports = Email;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiSTE4TiIsIl8iLCJjb25zb2xpZGF0ZSIsImRlYnVnIiwiZ2V0UGF0aHMiLCJodG1sVG9UZXh0IiwiaXMiLCJqdWljZSIsIm5vZGVtYWlsZXIiLCJwaWZ5IiwicHJldmlld0VtYWlsIiwianVpY2VSZXNvdXJjZXMiLCJodG1sIiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyIiwiZW52IiwicHJvY2VzcyIsIk5PREVfRU5WIiwidG9Mb3dlckNhc2UiLCJzdGF0IiwicmVhZEZpbGUiLCJFbWFpbCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwianVpY2VPcHRpb25zIiwiZGlzYWJsZUp1aWNlIiwicmVuZGVyIiwiY3VzdG9tUmVuZGVyIiwibWVyZ2UiLCJ2aWV3cyIsInJvb3QiLCJleHRlbnNpb24iLCJtYXAiLCJoYnMiLCJuamsiLCJlbmdpbmVTb3VyY2UiLCJsb2NhbHMiLCJjYWNoZSIsImluY2x1ZGVzIiwicHJldHR5IiwibWVzc2FnZSIsInNlbmQiLCJwcmV2aWV3IiwiaTE4biIsImJpbmQiLCJ0ZXh0T25seSIsImlnbm9yZUltYWdlIiwic3ViamVjdFByZWZpeCIsInByZXNlcnZlSW1wb3J0YW50Iiwid2ViUmVzb3VyY2VzIiwicmVsYXRpdmVUbyIsImltYWdlcyIsInRyYW5zcG9ydCIsImxhc3RMb2NhbGVGaWVsZCIsImdldFBhdGgiLCJ0eXBlIiwidGVtcGxhdGUiLCJqb2luIiwiaXNGdW5jdGlvbiIsInNlbmRNYWlsIiwiY3JlYXRlVHJhbnNwb3J0IiwiZ2V0VGVtcGxhdGVQYXRoIiwidGVtcGxhdGVFeGlzdHMiLCJjaGVja0FuZFJlbmRlciIsInJlbmRlckFsbCIsInZpZXciLCJpc0Fic29sdXRlIiwiZGlybmFtZSIsImJhc2VuYW1lIiwicGF0aHMiLCJmaWxlUGF0aCIsInJlbCIsInN0YXRzIiwiaXNGaWxlIiwiRXJyb3IiLCJzdHIiLCJleGlzdHMiLCJleHQiLCJyZXMiLCJlbmdpbmVOYW1lIiwicmVuZGVyRm4iLCJpc09iamVjdCIsInJlZ2lzdGVyIiwidXNlciIsImlzU3RyaW5nIiwibG9jYWxlIiwic2V0TG9jYWxlIiwibm9kZW1haWxlck1lc3NhZ2UiLCJzdWJqZWN0IiwidGV4dCIsImFsbCIsInRyaW0iLCJmcm9tU3RyaW5nIiwic3RyaW5nIiwiZW1wdHlTdHJpbmdPcldoaXRlc3BhY2UiLCJpc0FycmF5IiwiYXR0YWNobWVudHMiLCJpc0VtcHR5IiwiZGVmYXVsdHNEZWVwIiwib21pdCIsIk9iamVjdCIsImtleXMiLCJvYmoiLCJhc3NpZ24iLCJqc29uVHJhbnNwb3J0Iiwib3JpZ2luYWxNZXNzYWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsYUFBRCxDQUFwQjs7QUFDQSxNQUFNRyxDQUFDLEdBQUdILE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1JLFdBQVcsR0FBR0osT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBQ0EsTUFBTUssS0FBSyxHQUFHTCxPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLGlCQUFqQixDQUFkOztBQUNBLE1BQU1NLFFBQVEsR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBeEI7O0FBQ0EsTUFBTU8sVUFBVSxHQUFHUCxPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFDQSxNQUFNUSxFQUFFLEdBQUdSLE9BQU8sQ0FBQyxrQkFBRCxDQUFsQjs7QUFDQSxNQUFNUyxLQUFLLEdBQUdULE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1VLFVBQVUsR0FBR1YsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBQ0EsTUFBTVcsSUFBSSxHQUFHWCxPQUFPLENB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LENBQVltQixPQUF0QixDQUFsQixDQURGLEtBRUssTUFBTW5DLFlBQVksQ0FBQ2lDLE9BQUQsQ0FBbEI7QUFDTjs7QUFFRCxRQUFJLENBQUMsS0FBS2pCLE1BQUwsQ0FBWWtCLElBQWpCLEVBQXVCO0FBQ3JCekMsTUFBQUEsS0FBSyxDQUFDLGdEQUFELENBQUwsQ0FEcUIsQ0FFckI7QUFDQTs7QUFDQSxXQUFLdUIsTUFBTCxDQUFZNkIsU0FBWixHQUF3Qi9DLFVBQVUsQ0FBQ3VELGVBQVgsQ0FBMkI7QUFDakQ0QyxRQUFBQSxhQUFhLEVBQUU7QUFEa0MsT0FBM0IsQ0FBeEI7QUFHRDs7QUFFRCxVQUFNMUIsR0FBRyxHQUFHLE1BQU0sS0FBS3ZELE1BQUwsQ0FBWTZCLFNBQVosQ0FBc0JPLFFBQXRCLENBQStCbkIsT0FBL0IsQ0FBbEI7QUFDQXhDLElBQUFBLEtBQUssQ0FBQyxjQUFELENBQUw7QUFDQThFLElBQUFBLEdBQUcsQ0FBQzJCLGVBQUosR0FBc0JqRSxPQUF0QjtBQUNBLFdBQU9zQyxHQUFQO0FBQ0Q7O0FBdFNTOztBQXlTWjRCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRGLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgSTE4TiA9IHJlcXVpcmUoJ0BsYWRqcy9pMThuJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBjb25zb2xpZGF0ZSA9IHJlcXVpcmUoJ2NvbnNvbGlkYXRlJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VtYWlsLXRlbXBsYXRlcycpO1xuY29uc3QgZ2V0UGF0aHMgPSByZXF1aXJlKCdnZXQtcGF0aHMnKTtcbmNvbnN0IGh0bWxUb1RleHQgPSByZXF1aXJlKCdodG1sLXRvLXRleHQnKTtcbmNvbnN0IGlzID0gcmVxdWlyZSgnQHNpbmRyZXNvcmh1cy9pcycpO1xuY29uc3QganVpY2UgPSByZXF1aXJlKCdqdWljZScpO1xuY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoJ25vZGVtYWlsZXInKTtcbmNvbnN0IHBpZnkgPSByZXF1aXJlKCdwaWZ5Jyk7XG5jb25zdCBwcmV2aWV3RW1haWwgPSByZXF1aXJlKCdwcmV2aWV3LWVtYWlsJyk7XG5cbi8vIHByb21pc2UgdmVyc2lvbiBvZiBganVpY2UuanVpY2VSZXNvdXJjZXNgXG5jb25zdCBqdWljZVJlc291cmNlcyA9IChodG1sLCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAganVpY2UuanVpY2VSZXNvdXJjZXMoaHRtbCwgb3B0aW9ucywgKGVyciwgaHRtbCkgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgcmVzb2x2ZShodG1sKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBlbnYgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JykudG9Mb3dlckNhc2UoKTtcbmNvbnN0IHN0YXQgPSBwaWZ5KGZzLnN0YXQpO1xuY29uc3QgcmVhZEZpbGUgPSBwaWZ5KGZzLnJlYWRGaWxlKTtcblxuY2xhc3MgRW1haWwge1xuICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIGRlYnVnKCdjb25maWcgcGFzc2VkICVPJywgY29uZmlnKTtcblxuICAgIC8vIDIueCBiYWNrd2FyZHMgY29tcGF0aWJsZSBzdXBwb3J0XG4gICAgaWYgKGNvbmZpZy5qdWljZU9wdGlvbnMpIHtcbiAgICAgIGNvbmZpZy5qdWljZVJlc291cmNlcyA9IGNvbmZpZy5qdWljZU9wdGlvbnM7XG4gICAgICBkZWxldGUgY29uZmlnLmp1aWNlT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmRpc2FibGVKdWljZSkge1xuICAgICAgY29uZmlnLmp1aWNlID0gZmFsc2U7XG4gICAgICBkZWxldGUgY29uZmlnLmRpc2FibGVKdWljZTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLnJlbmRlcikge1xuICAgICAgY29uZmlnLmN1c3RvbVJlbmRlciA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcgPSBfLm1lcmdlKFxuICAgICAge1xuICAgICAgICB2aWV3czoge1xuICAgICAgICAgIC8vIGRpcmVjdG9yeSB3aGVyZSBlbWFpbCB0ZW1wbGF0ZXMgcmVzaWRlXG4gICAgICAgICAgcm9vdDogcGF0aC5yZXNvbHZlKCdlbWFpbHMnKSxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IGZpbGUgZXh0ZW5zaW9uIGZvciB0ZW1wbGF0ZVxuICAgICAgICAgICAgZXh0ZW5zaW9uOiAncHVnJyxcbiAgICAgICAgICAgIG1hcDoge1xuICAgICAgICAgICAgICBoYnM6ICdoYW5kbGViYXJzJyxcbiAgICAgICAgICAgICAgbmprOiAnbnVuanVja3MnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5naW5lU291cmNlOiBjb25zb2xpZGF0ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gbG9jYWxzIHRvIHBhc3MgdG8gdGVtcGxhdGVzIGZvciByZW5kZXJpbmdcbiAgICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICAgIC8vIHR1cm4gb24gY2FjaGluZyBmb3Igbm9uLWRldmVsb3BtZW50IGVudmlyb25tZW50c1xuICAgICAgICAgICAgY2FjaGU6ICFbJ2RldmVsb3BtZW50JywgJ3Rlc3QnXS5pbmNsdWRlcyhlbnYpLFxuICAgICAgICAgICAgLy8gcHJldHR5IGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvIGBmYWxzZWAgZm9yIHN1YmplY3QvdGV4dFxuICAgICAgICAgICAgcHJldHR5OiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyA8aHR0cHM6Ly9ub2RlbWFpbGVyLmNvbS9tZXNzYWdlLz5cbiAgICAgICAgbWVzc2FnZToge30sXG4gICAgICAgIHNlbmQ6ICFbJ2RldmVsb3BtZW50JywgJ3Rlc3QnXS5pbmNsdWRlcyhlbnYpLFxuICAgICAgICBwcmV2aWV3OiBlbnYgPT09ICdkZXZlbG9wbWVudCcsXG4gICAgICAgIC8vIDxodHRwczovL2dpdGh1Yi5jb20vbGFkanMvaTE4bj5cbiAgICAgICAgLy8gc2V0IHRvIGFuIG9iamVjdCB0byBjb25maWd1cmUgYW5kIGVuYWJsZSBpdFxuICAgICAgICBpMThuOiBmYWxzZSxcbiAgICAgICAgLy8gcGFzcyBhIGN1c3RvbSByZW5kZXIgZnVuY3Rpb24gaWYgbmVjZXNzYXJ5XG4gICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXIuYmluZCh0aGlzKSxcbiAgICAgICAgY3VzdG9tUmVuZGVyOiBmYWxzZSxcbiAgICAgICAgLy8gZm9yY2UgdGV4dC1vbmx5IHJlbmRlcmluZyBvZiB0ZW1wbGF0ZSAoZGlzcmVnYXJkcyB0ZW1wbGF0ZSBmb2xkZXIpXG4gICAgICAgIHRleHRPbmx5OiBmYWxzZSxcbiAgICAgICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS93ZXJrODUvbm9kZS1odG1sLXRvLXRleHQ+XG4gICAgICAgIGh0bWxUb1RleHQ6IHtcbiAgICAgICAgICBpZ25vcmVJbWFnZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBzdWJqZWN0UHJlZml4OiBmYWxzZSxcbiAgICAgICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2p1aWNlPlxuICAgICAgICBqdWljZTogdHJ1ZSxcbiAgICAgICAganVpY2VSZXNvdXJjZXM6IHtcbiAgICAgICAgICBwcmVzZXJ2ZUltcG9ydGFudDogdHJ1ZSxcbiAgICAgICAgICB3ZWJSZXNvdXJjZXM6IHtcbiAgICAgICAgICAgIHJlbGF0aXZlVG86IHBhdGgucmVzb2x2ZSgnYnVpbGQnKSxcbiAgICAgICAgICAgIGltYWdlczogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHBhc3MgYSB0cmFuc3BvcnQgY29uZmlndXJhdGlvbiBvYmplY3Qgb3IgYSB0cmFuc3BvcnQgaW5zdGFuY2VcbiAgICAgICAgLy8gKGUuZy4gYW4gaW5zdGFuY2UgaXMgY3JlYXRlZCB2aWEgYG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0YClcbiAgICAgICAgLy8gPGh0dHBzOi8vbm9kZW1haWxlci5jb20vdHJhbnNwb3J0cy8+XG4gICAgICAgIHRyYW5zcG9ydDoge30sXG4gICAgICAgIC8vIGxhc3QgbG9jYWxlIGZpZWxkIG5hbWUgKGFsc28gdXNlZCBieSBAbGFkanMvaTE4bilcbiAgICAgICAgbGFzdExvY2FsZUZpZWxkOiAnbGFzdF9sb2NhbGUnLFxuICAgICAgICBnZXRQYXRoKHR5cGUsIHRlbXBsYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhdGguam9pbih0ZW1wbGF0ZSwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb25maWdcbiAgICApO1xuXG4gICAgLy8gb3ZlcnJpZGUgZXhpc3RpbmcgbWV0aG9kXG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLmNvbmZpZy5yZW5kZXI7XG5cbiAgICBpZiAoIV8uaXNGdW5jdGlvbih0aGlzLmNvbmZpZy50cmFuc3BvcnQuc2VuZE1haWwpKVxuICAgICAgdGhpcy5jb25maWcudHJhbnNwb3J0ID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQodGhpcy5jb25maWcudHJhbnNwb3J0KTtcblxuICAgIGRlYnVnKCd0cmFuc2Zvcm1lZCBjb25maWcgJU8nLCB0aGlzLmNvbmZpZyk7XG5cbiAgICB0aGlzLmp1aWNlUmVzb3VyY2VzID0gdGhpcy5qdWljZVJlc291cmNlcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0VGVtcGxhdGVQYXRoID0gdGhpcy5nZXRUZW1wbGF0ZVBhdGguYmluZCh0aGlzKTtcbiAgICB0aGlzLnRlbXBsYXRlRXhpc3RzID0gdGhpcy50ZW1wbGF0ZUV4aXN0cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hlY2tBbmRSZW5kZXIgPSB0aGlzLmNoZWNrQW5kUmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVuZGVyQWxsID0gdGhpcy5yZW5kZXJBbGwuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNlbmQgPSB0aGlzLnNlbmQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8vIHNob3J0aGFuZCB1c2Ugb2YgYGp1aWNlUmVzb3VyY2VzYCB3aXRoIHRoZSBjb25maWdcbiAgLy8gKG1haW5seSBmb3IgY3VzdG9tIHJlbmRlcnMgbGlrZSBmcm9tIGEgZGF0YWJhc2UpXG4gIGp1aWNlUmVzb3VyY2VzKGh0bWwpIHtcbiAgICByZXR1cm4ganVpY2VSZXNvdXJjZXMoaHRtbCwgdGhpcy5jb25maWcuanVpY2VSZXNvdXJjZXMpO1xuICB9XG5cbiAgLy8gYSBzaW1wbGUgaGVscGVyIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYWN0dWFsIGZpbGUgcGF0aCBmb3IgdGhlIHRlbXBsYXRlXG4gIGFzeW5jIGdldFRlbXBsYXRlUGF0aCh0ZW1wbGF0ZSkge1xuICAgIGNvbnN0IFtyb290LCB2aWV3XSA9IHBhdGguaXNBYnNvbHV0ZSh0ZW1wbGF0ZSlcbiAgICAgID8gW3BhdGguZGlybmFtZSh0ZW1wbGF0ZSksIHBhdGguYmFzZW5hbWUodGVtcGxhdGUpXVxuICAgICAgOiBbdGhpcy5jb25maWcudmlld3Mucm9vdCwgdGVtcGxhdGVdO1xuICAgIGNvbnN0IHBhdGhzID0gYXdhaXQgZ2V0UGF0aHMoXG4gICAgICByb290LFxuICAgICAgdmlldyxcbiAgICAgIHRoaXMuY29uZmlnLnZpZXdzLm9wdGlvbnMuZXh0ZW5zaW9uXG4gICAgKTtcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShyb290LCBwYXRocy5yZWwpO1xuICAgIHJldHVybiB7IGZpbGVQYXRoLCBwYXRocyB9O1xuICB9XG5cbiAgLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGEgdGVtcGxhdGUgZXhpc3RzXG4gIC8vICh1c2VzIHNhbWUgbG9vay11cCBhcHByb2FjaCBhcyBgcmVuZGVyYCBmdW5jdGlvbilcbiAgYXN5bmMgdGVtcGxhdGVFeGlzdHModmlldykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGZpbGVQYXRoIH0gPSBhd2FpdCB0aGlzLmdldFRlbXBsYXRlUGF0aCh2aWV3KTtcbiAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgc3RhdChmaWxlUGF0aCk7XG4gICAgICBpZiAoIXN0YXRzLmlzRmlsZSgpKSB0aHJvdyBuZXcgRXJyb3IoYCR7ZmlsZVBhdGh9IHdhcyBub3QgYSBmaWxlYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGRlYnVnKCd0ZW1wbGF0ZUV4aXN0cycsIGVycik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2hlY2tBbmRSZW5kZXIodHlwZSwgdGVtcGxhdGUsIGxvY2Fscykge1xuICAgIGNvbnN0IHN0ciA9IHRoaXMuY29uZmlnLmdldFBhdGgodHlwZSwgdGVtcGxhdGUsIGxvY2Fscyk7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5jdXN0b21SZW5kZXIpIHtcbiAgICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IHRoaXMudGVtcGxhdGVFeGlzdHMoc3RyKTtcbiAgICAgIGlmICghZXhpc3RzKSByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKHN0ciwge1xuICAgICAgLi4ubG9jYWxzLFxuICAgICAgLi4uKHR5cGUgPT09ICdodG1sJyA/IHt9IDogeyBwcmV0dHk6IGZhbHNlIH0pXG4gICAgfSk7XG4gIH1cblxuICAvLyBwcm9taXNlIHZlcnNpb24gb2YgY29uc29saWRhdGUncyByZW5kZXJcbiAgLy8gaW5zcGlyZWQgYnkga29hLXZpZXdzIGFuZCByZS11c2VzIHRoZSBzYW1lIGNvbmZpZ1xuICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL3F1ZWNrZXp6L2tvYS12aWV3cz5cbiAgYXN5bmMgcmVuZGVyKHZpZXcsIGxvY2FscyA9IHt9KSB7XG4gICAgY29uc3QgeyBtYXAsIGVuZ2luZVNvdXJjZSB9ID0gdGhpcy5jb25maWcudmlld3Mub3B0aW9ucztcbiAgICBjb25zdCB7IGZpbGVQYXRoLCBwYXRocyB9ID0gYXdhaXQgdGhpcy5nZXRUZW1wbGF0ZVBhdGgodmlldyk7XG4gICAgaWYgKHBhdGhzLmV4dCA9PT0gJ2h0bWwnICYmICFtYXApIHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlYWRGaWxlKGZpbGVQYXRoLCAndXRmOCcpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBjb25zdCBlbmdpbmVOYW1lID0gbWFwICYmIG1hcFtwYXRocy5leHRdID8gbWFwW3BhdGhzLmV4dF0gOiBwYXRocy5leHQ7XG4gICAgY29uc3QgcmVuZGVyRm4gPSBlbmdpbmVTb3VyY2VbZW5naW5lTmFtZV07XG4gICAgaWYgKCFlbmdpbmVOYW1lIHx8ICFyZW5kZXJGbilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEVuZ2luZSBub3QgZm91bmQgZm9yIHRoZSBcIi4ke3BhdGhzLmV4dH1cIiBmaWxlIGV4dGVuc2lvbmBcbiAgICAgICk7XG5cbiAgICBpZiAoXy5pc09iamVjdCh0aGlzLmNvbmZpZy5pMThuKSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmNvbmZpZy5pMThuLmxhc3RMb2NhbGVGaWVsZCAmJlxuICAgICAgICB0aGlzLmNvbmZpZy5sYXN0TG9jYWxlRmllbGQgJiZcbiAgICAgICAgdGhpcy5jb25maWcuaTE4bi5sYXN0TG9jYWxlRmllbGQgIT09IHRoaXMuY29uZmlnLmxhc3RMb2NhbGVGaWVsZFxuICAgICAgKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRoZSAnbGFzdExvY2FsZUZpZWxkJyAoU3RyaW5nKSBvcHRpb24gZm9yIEBsYWRqcy9pMThuIGFuZCBlbWFpbC10ZW1wbGF0ZXMgZG8gbm90IG1hdGNoLCBpMThuIHZhbHVlIHdhcyAke3RoaXMuY29uZmlnLmkxOG4ubGFzdExvY2FsZUZpZWxkfSBhbmQgZW1haWwtdGVtcGxhdGVzIHZhbHVlIHdhcyAke3RoaXMuY29uZmlnLmxhc3RMb2NhbGVGaWVsZH1gXG4gICAgICAgICk7XG5cbiAgICAgIGNvbnN0IGkxOG4gPSBuZXcgSTE4Tih7IC4uLnRoaXMuY29uZmlnLmkxOG4sIHJlZ2lzdGVyOiBsb2NhbHMgfSk7XG5cbiAgICAgIC8vIHN1cHBvcnQgYGxvY2Fscy51c2VyLmxhc3RfbG9jYWxlYCAodmFyaWFibGUgYmFzZWQgbmFtZSBsYXN0TG9jYWxlRmllbGQpXG4gICAgICAvLyAoZS5nLiBmb3IgPGh0dHBzOi8vbGFkLmpzLm9yZz4pXG4gICAgICBpZiAoXG4gICAgICAgIF8uaXNPYmplY3QobG9jYWxzLnVzZXIpICYmXG4gICAgICAgIF8uaXNTdHJpbmcobG9jYWxzLnVzZXJbdGhpcy5jb25maWcubGFzdExvY2FsZUZpZWxkXSlcbiAgICAgIClcbiAgICAgICAgbG9jYWxzLmxvY2FsZSA9IGxvY2Fscy51c2VyW3RoaXMuY29uZmlnLmxhc3RMb2NhbGVGaWVsZF07XG5cbiAgICAgIGlmIChfLmlzU3RyaW5nKGxvY2Fscy5sb2NhbGUpKSBpMThuLnNldExvY2FsZShsb2NhbHMubG9jYWxlKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBwaWZ5KHJlbmRlckZuKShmaWxlUGF0aCwgbG9jYWxzKTtcbiAgICAvLyB0cmFuc2Zvcm0gdGhlIGh0bWwgd2l0aCBqdWljZSB1c2luZyByZW1vdGUgcGF0aHNcbiAgICAvLyBnb29nbGUgbm93IHN1cHBvcnRzIG1lZGlhIHF1ZXJpZXNcbiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9nbWFpbC9kZXNpZ24vcmVmZXJlbmNlL3N1cHBvcnRlZF9jc3NcbiAgICBpZiAoIXRoaXMuY29uZmlnLmp1aWNlKSByZXR1cm4gcmVzO1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCB0aGlzLmp1aWNlUmVzb3VyY2VzKHJlcyk7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuICBhc3luYyByZW5kZXJBbGwodGVtcGxhdGUsIGxvY2FscyA9IHt9LCBub2RlbWFpbGVyTWVzc2FnZSA9IHt9KSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHsgLi4ubm9kZW1haWxlck1lc3NhZ2UgfTtcblxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgY29uc3QgW3N1YmplY3QsIGh0bWwsIHRleHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIFsnc3ViamVjdCcsICdodG1sJywgJ3RleHQnXS5tYXAodHlwZSA9PlxuICAgICAgICAgIHRoaXMuY2hlY2tBbmRSZW5kZXIodHlwZSwgdGVtcGxhdGUsIGxvY2FscylcbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgaWYgKHN1YmplY3QpIG1lc3NhZ2Uuc3ViamVjdCA9IHN1YmplY3QudHJpbSgpO1xuICAgICAgaWYgKGh0bWwpIG1lc3NhZ2UuaHRtbCA9IGh0bWw7XG4gICAgICBpZiAodGV4dCkgbWVzc2FnZS50ZXh0ID0gdGV4dDtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5zdWJqZWN0ICYmIHRoaXMuY29uZmlnLnN1YmplY3RQcmVmaXgpXG4gICAgICBtZXNzYWdlLnN1YmplY3QgPSB0aGlzLmNvbmZpZy5zdWJqZWN0UHJlZml4ICsgbWVzc2FnZS5zdWJqZWN0O1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmh0bWxUb1RleHQgJiYgbWVzc2FnZS5odG1sICYmICFtZXNzYWdlLnRleHQpXG4gICAgICAvLyB3ZSdkIHVzZSBub2RlbWFpbGVyLWh0bWwtdG8tdGV4dCBwbHVnaW5cbiAgICAgIC8vIGJ1dCB3ZSByZWFsbHkgZG9uJ3QgbmVlZCB0byBzdXBwb3J0IGNpZFxuICAgICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyaXM5L25vZGVtYWlsZXItaHRtbC10by10ZXh0PlxuICAgICAgbWVzc2FnZS50ZXh0ID0gaHRtbFRvVGV4dC5mcm9tU3RyaW5nKFxuICAgICAgICBtZXNzYWdlLmh0bWwsXG4gICAgICAgIHRoaXMuY29uZmlnLmh0bWxUb1RleHRcbiAgICAgICk7XG5cbiAgICAvLyBpZiB3ZSBvbmx5IHdhbnQgYSB0ZXh0LWJhc2VkIHZlcnNpb24gb2YgdGhlIGVtYWlsXG4gICAgaWYgKHRoaXMuY29uZmlnLnRleHRPbmx5KSBkZWxldGUgbWVzc2FnZS5odG1sO1xuXG4gICAgLy8gaWYgbm8gc3ViamVjdCwgaHRtbCwgb3IgdGV4dCBjb250ZW50IGV4aXN0cyB0aGVuIHdlIHNob3VsZFxuICAgIC8vIHRocm93IGFuIGVycm9yIHRoYXQgc2F5cyBhdCBsZWFzdCBvbmUgbXVzdCBiZSBmb3VuZFxuICAgIC8vIG90aGVyd2lzZSB0aGUgZW1haWwgd291bGQgYmUgYmxhbmsgKGRlZmVhdHMgcHVycG9zZSBvZiBlbWFpbC10ZW1wbGF0ZXMpXG4gICAgaWYgKFxuICAgICAgKCFpcy5zdHJpbmcobWVzc2FnZS5zdWJqZWN0KSB8fFxuICAgICAgICBpcy5lbXB0eVN0cmluZ09yV2hpdGVzcGFjZShtZXNzYWdlLnN1YmplY3QpKSAmJlxuICAgICAgKCFpcy5zdHJpbmcobWVzc2FnZS50ZXh0KSB8fCBpcy5lbXB0eVN0cmluZ09yV2hpdGVzcGFjZShtZXNzYWdlLnRleHQpKSAmJlxuICAgICAgKCFpcy5zdHJpbmcobWVzc2FnZS5odG1sKSB8fCBpcy5lbXB0eVN0cmluZ09yV2hpdGVzcGFjZShtZXNzYWdlLmh0bWwpKSAmJlxuICAgICAgXy5pc0FycmF5KG1lc3NhZ2UuYXR0YWNobWVudHMpICYmXG4gICAgICBfLmlzRW1wdHkobWVzc2FnZS5hdHRhY2htZW50cylcbiAgICApXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBObyBjb250ZW50IHdhcyBwYXNzZWQgZm9yIHN1YmplY3QsIGh0bWwsIHRleHQsIG5vciBhdHRhY2htZW50cyBtZXNzYWdlIHByb3BzLiBDaGVjayB0aGF0IHRoZSBmaWxlcyBmb3IgdGhlIHRlbXBsYXRlIFwiJHt0ZW1wbGF0ZX1cIiBleGlzdC5gXG4gICAgICApO1xuXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBhc3luYyBzZW5kKG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICB0ZW1wbGF0ZTogJycsXG4gICAgICBtZXNzYWdlOiB7fSxcbiAgICAgIGxvY2Fsczoge30sXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcblxuICAgIGxldCB7IHRlbXBsYXRlLCBtZXNzYWdlLCBsb2NhbHMgfSA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCBhdHRhY2htZW50cyA9XG4gICAgICBtZXNzYWdlLmF0dGFjaG1lbnRzIHx8IHRoaXMuY29uZmlnLm1lc3NhZ2UuYXR0YWNobWVudHMgfHwgW107XG5cbiAgICBtZXNzYWdlID0gXy5kZWZhdWx0c0RlZXAoXG4gICAgICB7fSxcbiAgICAgIF8ub21pdChtZXNzYWdlLCAnYXR0YWNobWVudHMnKSxcbiAgICAgIF8ub21pdCh0aGlzLmNvbmZpZy5tZXNzYWdlLCAnYXR0YWNobWVudHMnKVxuICAgICk7XG4gICAgbG9jYWxzID0gXy5kZWZhdWx0c0RlZXAoe30sIHRoaXMuY29uZmlnLnZpZXdzLmxvY2FscywgbG9jYWxzKTtcblxuICAgIGlmIChhdHRhY2htZW50cykgbWVzc2FnZS5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzO1xuXG4gICAgZGVidWcoJ3RlbXBsYXRlICVzJywgdGVtcGxhdGUpO1xuICAgIGRlYnVnKCdtZXNzYWdlICVPJywgbWVzc2FnZSk7XG4gICAgZGVidWcoJ2xvY2FscyAoa2V5cyBvbmx5KTogJU8nLCBPYmplY3Qua2V5cyhsb2NhbHMpKTtcblxuICAgIC8vIGdldCBhbGwgYXZhaWxhYmxlIHRlbXBsYXRlc1xuICAgIGNvbnN0IG9iaiA9IGF3YWl0IHRoaXMucmVuZGVyQWxsKHRlbXBsYXRlLCBsb2NhbHMsIG1lc3NhZ2UpO1xuXG4gICAgLy8gYXNzaWduIHRoZSBvYmplY3QgdmFyaWFibGVzIG92ZXIgdG8gdGhlIG1lc3NhZ2VcbiAgICBPYmplY3QuYXNzaWduKG1lc3NhZ2UsIG9iaik7XG5cbiAgICBpZiAodGhpcy5jb25maWcucHJldmlldykge1xuICAgICAgZGVidWcoJ3VzaW5nIGBwcmV2aWV3LWVtYWlsYCB0byBwcmV2aWV3IGVtYWlsJyk7XG4gICAgICBpZiAoXy5pc09iamVjdCh0aGlzLmNvbmZpZy5wcmV2aWV3KSlcbiAgICAgICAgYXdhaXQgcHJldmlld0VtYWlsKG1lc3NhZ2UsIHRoaXMuY29uZmlnLnByZXZpZXcpO1xuICAgICAgZWxzZSBhd2FpdCBwcmV2aWV3RW1haWwobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5zZW5kKSB7XG4gICAgICBkZWJ1Zygnc2VuZCBkaXNhYmxlZCBzbyB3ZSBhcmUgZW5zdXJpbmcgSlNPTlRyYW5zcG9ydCcpO1xuICAgICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlbWFpbGVyL25vZGVtYWlsZXIvaXNzdWVzLzc5OD5cbiAgICAgIC8vIGlmICh0aGlzLmNvbmZpZy50cmFuc3BvcnQubmFtZSAhPT0gJ0pTT05UcmFuc3BvcnQnKVxuICAgICAgdGhpcy5jb25maWcudHJhbnNwb3J0ID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICAgICAgICBqc29uVHJhbnNwb3J0OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNvbmZpZy50cmFuc3BvcnQuc2VuZE1haWwobWVzc2FnZSk7XG4gICAgZGVidWcoJ21lc3NhZ2Ugc2VudCcpO1xuICAgIHJlcy5vcmlnaW5hbE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHJldHVybiByZXM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbWFpbDtcbiJdfQ==