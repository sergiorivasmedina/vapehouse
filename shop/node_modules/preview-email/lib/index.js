"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const fs = require('fs');

const os = require('os');

const path = require('path');

const debug = require('debug')('preview-email');

const dayjs = require('dayjs');

const nodemailer = require('nodemailer');

const open = require('open');

const pify = require('pify');

const pug = require('pug');

const uuid = require('uuid');

const writeFile = pify(fs.writeFile);
const transport = nodemailer.createTransport({
  jsonTransport: true
});
const templateFilePath = path.join(__dirname, '..', 'template.pug');
const renderFilePromise = pify(pug.renderFile);

const previewEmail = async (message, options) => {
  options = _objectSpread({
    dir: os.tmpdir(),
    id: uuid.v4(),
    open: {
      wait: false
    },
    template: templateFilePath
  }, options);
  debug('message', message, 'options', options);
  if (typeof message !== 'object') throw new Error('Message argument is required');
  const res = await transport.sendMail(message);
  res.message = JSON.parse(res.message);
  const html = await renderFilePromise(options.template, Object.assign(res.message, {
    cache: true,
    pretty: true,
    dayjs
  }));
  const filePath = `${options.dir}/${options.id}.html`;
  debug('filePath', filePath);
  await writeFile(filePath, html);
  if (options.open) await open(filePath, options.open);
  return `file://${filePath}`;
};

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJvcyIsInBhdGgiLCJkZWJ1ZyIsImRheWpzIiwibm9kZW1haWxlciIsIm9wZW4iLCJwaWZ5IiwicHVnIiwidXVpZCIsIndyaXRlRmlsZSIsInRyYW5zcG9ydCIsImNyZWF0ZVRyYW5zcG9ydCIsImpzb25UcmFuc3BvcnQiLCJ0ZW1wbGF0ZUZpbGVQYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInJlbmRlckZpbGVQcm9taXNlIiwicmVuZGVyRmlsZSIsInByZXZpZXdFbWFpbCIsIm1lc3NhZ2UiLCJvcHRpb25zIiwiZGlyIiwidG1wZGlyIiwiaWQiLCJ2NCIsIndhaXQiLCJ0ZW1wbGF0ZSIsIkVycm9yIiwicmVzIiwic2VuZE1haWwiLCJKU09OIiwicGFyc2UiLCJodG1sIiwiT2JqZWN0IiwiYXNzaWduIiwiY2FjaGUiLCJwcmV0dHkiLCJmaWxlUGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQVAsQ0FBaUIsZUFBakIsQ0FBZDs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1LLFVBQVUsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBQ0EsTUFBTU0sSUFBSSxHQUFHTixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1RLEdBQUcsR0FBR1IsT0FBTyxDQUFDLEtBQUQsQ0FBbkI7O0FBQ0EsTUFBTVMsSUFBSSxHQUFHVCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFFQSxNQUFNVSxTQUFTLEdBQUdILElBQUksQ0FBQ1IsRUFBRSxDQUFDVyxTQUFKLENBQXRCO0FBRUEsTUFBTUMsU0FBUyxHQUFHTixVQUFVLENBQUNPLGVBQVgsQ0FBMkI7QUFDM0NDLEVBQUFBLGFBQWEsRUFBRTtBQUQ0QixDQUEzQixDQUFsQjtBQUlBLE1BQU1DLGdCQUFnQixHQUFHWixJQUFJLENBQUNhLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixjQUEzQixDQUF6QjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHVixJQUFJLENBQUNDLEdBQUcsQ0FBQ1UsVUFBTCxDQUE5Qjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsT0FBT0MsT0FBUCxFQUFnQkMsT0FBaEIsS0FBNEI7QUFDL0NBLEVBQUFBLE9BQU87QUFDTEMsSUFBQUEsR0FBRyxFQUFFckIsRUFBRSxDQUFDc0IsTUFBSCxFQURBO0FBRUxDLElBQUFBLEVBQUUsRUFBRWYsSUFBSSxDQUFDZ0IsRUFBTCxFQUZDO0FBR0xuQixJQUFBQSxJQUFJLEVBQUU7QUFBRW9CLE1BQUFBLElBQUksRUFBRTtBQUFSLEtBSEQ7QUFJTEMsSUFBQUEsUUFBUSxFQUFFYjtBQUpMLEtBS0ZPLE9BTEUsQ0FBUDtBQU9BbEIsRUFBQUEsS0FBSyxDQUFDLFNBQUQsRUFBWWlCLE9BQVosRUFBcUIsU0FBckIsRUFBZ0NDLE9BQWhDLENBQUw7QUFFQSxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFDRSxNQUFNLElBQUlRLEtBQUosQ0FBVSw4QkFBVixDQUFOO0FBRUYsUUFBTUMsR0FBRyxHQUFHLE1BQU1sQixTQUFTLENBQUNtQixRQUFWLENBQW1CVixPQUFuQixDQUFsQjtBQUVBUyxFQUFBQSxHQUFHLENBQUNULE9BQUosR0FBY1csSUFBSSxDQUFDQyxLQUFMLENBQVdILEdBQUcsQ0FBQ1QsT0FBZixDQUFkO0FBRUEsUUFBTWEsSUFBSSxHQUFHLE1BQU1oQixpQkFBaUIsQ0FDbENJLE9BQU8sQ0FBQ00sUUFEMEIsRUFFbENPLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTixHQUFHLENBQUNULE9BQWxCLEVBQTJCO0FBQ3pCZ0IsSUFBQUEsS0FBSyxFQUFFLElBRGtCO0FBRXpCQyxJQUFBQSxNQUFNLEVBQUUsSUFGaUI7QUFHekJqQyxJQUFBQTtBQUh5QixHQUEzQixDQUZrQyxDQUFwQztBQVNBLFFBQU1rQyxRQUFRLEdBQUksR0FBRWpCLE9BQU8sQ0FBQ0MsR0FBSSxJQUFHRCxPQUFPLENBQUNHLEVBQUcsT0FBOUM7QUFDQXJCLEVBQUFBLEtBQUssQ0FBQyxVQUFELEVBQWFtQyxRQUFiLENBQUw7QUFDQSxRQUFNNUIsU0FBUyxDQUFDNEIsUUFBRCxFQUFXTCxJQUFYLENBQWY7QUFFQSxNQUFJWixPQUFPLENBQUNmLElBQVosRUFBa0IsTUFBTUEsSUFBSSxDQUFDZ0MsUUFBRCxFQUFXakIsT0FBTyxDQUFDZixJQUFuQixDQUFWO0FBRWxCLFNBQVEsVUFBU2dDLFFBQVMsRUFBMUI7QUFDRCxDQWpDRDs7QUFtQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLFlBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgncHJldmlldy1lbWFpbCcpO1xuY29uc3QgZGF5anMgPSByZXF1aXJlKCdkYXlqcycpO1xuY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoJ25vZGVtYWlsZXInKTtcbmNvbnN0IG9wZW4gPSByZXF1aXJlKCdvcGVuJyk7XG5jb25zdCBwaWZ5ID0gcmVxdWlyZSgncGlmeScpO1xuY29uc3QgcHVnID0gcmVxdWlyZSgncHVnJyk7XG5jb25zdCB1dWlkID0gcmVxdWlyZSgndXVpZCcpO1xuXG5jb25zdCB3cml0ZUZpbGUgPSBwaWZ5KGZzLndyaXRlRmlsZSk7XG5cbmNvbnN0IHRyYW5zcG9ydCA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAganNvblRyYW5zcG9ydDogdHJ1ZVxufSk7XG5cbmNvbnN0IHRlbXBsYXRlRmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAndGVtcGxhdGUucHVnJyk7XG5cbmNvbnN0IHJlbmRlckZpbGVQcm9taXNlID0gcGlmeShwdWcucmVuZGVyRmlsZSk7XG5cbmNvbnN0IHByZXZpZXdFbWFpbCA9IGFzeW5jIChtZXNzYWdlLCBvcHRpb25zKSA9PiB7XG4gIG9wdGlvbnMgPSB7XG4gICAgZGlyOiBvcy50bXBkaXIoKSxcbiAgICBpZDogdXVpZC52NCgpLFxuICAgIG9wZW46IHsgd2FpdDogZmFsc2UgfSxcbiAgICB0ZW1wbGF0ZTogdGVtcGxhdGVGaWxlUGF0aCxcbiAgICAuLi5vcHRpb25zXG4gIH07XG4gIGRlYnVnKCdtZXNzYWdlJywgbWVzc2FnZSwgJ29wdGlvbnMnLCBvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdvYmplY3QnKVxuICAgIHRocm93IG5ldyBFcnJvcignTWVzc2FnZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRyYW5zcG9ydC5zZW5kTWFpbChtZXNzYWdlKTtcblxuICByZXMubWVzc2FnZSA9IEpTT04ucGFyc2UocmVzLm1lc3NhZ2UpO1xuXG4gIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJGaWxlUHJvbWlzZShcbiAgICBvcHRpb25zLnRlbXBsYXRlLFxuICAgIE9iamVjdC5hc3NpZ24ocmVzLm1lc3NhZ2UsIHtcbiAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgcHJldHR5OiB0cnVlLFxuICAgICAgZGF5anNcbiAgICB9KVxuICApO1xuXG4gIGNvbnN0IGZpbGVQYXRoID0gYCR7b3B0aW9ucy5kaXJ9LyR7b3B0aW9ucy5pZH0uaHRtbGA7XG4gIGRlYnVnKCdmaWxlUGF0aCcsIGZpbGVQYXRoKTtcbiAgYXdhaXQgd3JpdGVGaWxlKGZpbGVQYXRoLCBodG1sKTtcblxuICBpZiAob3B0aW9ucy5vcGVuKSBhd2FpdCBvcGVuKGZpbGVQYXRoLCBvcHRpb25zLm9wZW4pO1xuXG4gIHJldHVybiBgZmlsZTovLyR7ZmlsZVBhdGh9YDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJldmlld0VtYWlsO1xuIl19